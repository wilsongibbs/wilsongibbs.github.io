<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>实验课记录-链表你怕了吗</title>
    <url>/2019/experiment-c/</url>
    <content><![CDATA[<p><img src="/2019/experiment-c/cover.jpeg" alt="cover"></p>
<p>每次实验课都能写到大脑缺氧，拖着沉重的额头debug，下课了也不一定做完。但是还是值得上手的，毕竟不做不知道，一做吓一跳。</p>
<a id="more"></a>

<h1 id="查找神秘字符串"><a href="#查找神秘字符串" class="headerlink" title="查找神秘字符串"></a>查找神秘字符串</h1><p>这道题刚动手就停下了，输入一行字符串每个单词存入一个节点？用scanf搞了半天也没搞出啥。去上了个厕所路上一想，用getchar不就行了？字符一个一个判断，空格换新节点。就是这么简单，可跳进坑的人爬起来可不容易。</p>
<p><img src="/2019/experiment-c/exp1.png" alt="exp1"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">word</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">21</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">word</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct word *<span class="title">CreateLList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> input = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">word</span>* <span class="title">head</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">word</span>* <span class="title">h1</span> = (<span class="title">struct</span> <span class="title">word</span>*)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">word</span>));</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">word</span>* <span class="title">h2</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    head = h1;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span>; )</span><br><span class="line">        &#123;</span><br><span class="line">            input = getchar();</span><br><span class="line">            <span class="keyword">if</span> (input != <span class="string">&#x27; &#x27;</span> &amp;&amp; input != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (input &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; input &lt;= <span class="string">&#x27;z&#x27;</span> || input &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; input &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    h1-&gt;x[i] = input;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        h1-&gt;x[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            h1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            h2 = h1;</span><br><span class="line">            h1 = (struct word*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct word));</span><br><span class="line">            h2-&gt;next = h1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最无语的是查找字符串，把一个单词劈开查……写出来倒是没用多久，可是写完了发现最后一个programming怎么就出不来。哪有这么逗的？就败在programming上？折腾了半天才发现，原来是因为programming结尾有个g，而要找的是gram，一个一个字符比较的时候有了匹配并没有结束循环，而是继续前进，碰到g有没有gram，flag又变回0……好吧，我坑自己确实很在行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">word</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">21</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">word</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_LList</span><span class="params">(struct word* head, <span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">word</span>* <span class="title">p1</span> = <span class="title">head</span>;</span></span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>,i,j,flag;</span><br><span class="line">    <span class="keyword">while</span> (p1)</span><br><span class="line">    &#123;    </span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>;p1-&gt;x[i]; i++)</span><br><span class="line">        &#123;    </span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[j] == p1-&gt;x[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (; str[j + <span class="number">1</span>];j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str[j + <span class="number">1</span>] != p1-&gt;x[i + j + <span class="number">1</span>])</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, p1-&gt;x);</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id><a href="#" class="headerlink" title></a></h6><h1 id="K个升序"><a href="#K个升序" class="headerlink" title="K个升序"></a>K个升序</h1><p><img src="/2019/experiment-c/exp2.png" alt="exp2"></p>
<p>最后一节实验课，强哥说这次来个简单的。结果3小时的课足足拖到4个钟，也没有几个写出来了。其实第一眼看确实不复杂，也没有像以前一样各种限制。好不容易自以为写好了，仔细一看测试数据，’8901’也算升序的吗？还能掉头？瞬间一脸懵，不想继续了。</p>
<p>后来看强哥的参考，直接把前几位数接在后面，又是强转又是拆，这么暴力的吗？总感觉不是很好。回宿舍想了想，这种东西存在环状链表里不就好了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">number</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">single</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">single</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchLList</span><span class="params">(struct number* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">number</span>* <span class="title">p1</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i, j, k, n, t, p, num, flag,length;</span><br><span class="line">    <span class="keyword">int</span> result[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">single</span>* <span class="title">pt</span> = (<span class="title">struct</span> <span class="title">single</span>*)<span class="title">malloc</span>(<span class="title">LEN</span>);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">single</span>* <span class="title">pt2</span>=<span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">single</span>* <span class="title">pt3</span>=<span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">single</span>* <span class="title">head2</span>=<span class="title">NULL</span>;</span></span><br><span class="line">    p1 = head;</span><br><span class="line">    <span class="keyword">while</span> (p1)</span><br><span class="line">    &#123;</span><br><span class="line">        num = p1-&gt;x;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Number:%d\n&quot;</span>, num);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                head2 = pt;</span><br><span class="line">            pt-&gt;y = num % <span class="number">10</span>;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">            pt2 = pt;</span><br><span class="line">            pt = (struct single*)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">            pt-&gt;next = pt2;</span><br><span class="line">        &#125;</span><br><span class="line">        n = i;</span><br><span class="line">        pt = pt2;</span><br><span class="line">        head2-&gt;next = pt;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">2</span>; k &lt;= n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                pt3 = pt2;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; k; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pt3-&gt;y == pt3-&gt;next-&gt;y - <span class="number">1</span> || pt3-&gt;y == pt3-&gt;next-&gt;y + <span class="number">9</span>)</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pt3 = pt3-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    pt3 = pt2;</span><br><span class="line">                    result[t] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        result[t] = result[t] * <span class="number">10</span> + pt3-&gt;y;</span><br><span class="line">                        pt3 = pt3-&gt;next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    t++;</span><br><span class="line">                &#125;</span><br><span class="line">                pt2 = pt2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pt2 = pt;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;K=%d&quot;</span>, k);</span><br><span class="line">            <span class="keyword">if</span> (t)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;则有&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; t; p++)</span><br><span class="line">                &#123;</span><br><span class="line">                    length = <span class="built_in">log10</span>(result[p])+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(length!=k)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;0%d &quot;</span>, result[p]);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, result[p]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[%d次]\n&quot;</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;没有符合答案，[0次]\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="-1"><a href="#-1" class="headerlink" title></a></h6><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>实验课终于结束了，在机房应该掉了不少头发。虽然强哥的这些题很令人烦躁，但越是考验人的，越是能让人跳出弱鸡循环。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Python自动抢京东优惠券</title>
    <url>/2019/jd-coupon/</url>
    <content><![CDATA[<p>自从开了PLUS会员，100元的优惠券我每次都只能抢到5块，10块，从来没抢到满1200减50的。这次正好家里买电器，一看20:22了，行等22点抢。</p>
<p>可是越等越虚，开始情不自禁怀疑自己的手速?，打开电脑看了一波，还可以电脑抢，应该快一点。结果看着看着就想起来用Python可以自动控制Chrome点击操作，那我直接写一个自动抢的不就好了。</p>
<p><strong>用到的库</strong>：<code>selenium</code>  <code>time</code>  <code>schedule</code></p>
<a id="more"></a> 

<h1 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h1><p>首先分析网页，用 class=”get-btn” 定位第五个50元卷立即领取按钮</p>
<p><img src="/2019/jd-coupon/img1.png" alt="img1"></p>
<p>接着定位确定键，比较烦人的是class name定位不到，最后用link text定位到了。</p>
<p><img src="/2019/jd-coupon/img2.png" alt="img2">   </p>
<h6 id><a href="#" class="headerlink" title></a></h6><h1 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h1><p>但是每次启动都要重新登录京东，不会记录cookies，所以只能做成一秒刷新一次，先扫码登录10s，再每隔1s刷新点击一次。</p>
<p><img src="/2019/jd-coupon/img3.png" alt="img3"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无限循环版v1.0</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">driver=webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;https://plus.jd.com/coupon/index&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    driver.get(<span class="string">&#x27;https://plus.jd.com/coupon/index&#x27;</span>)</span><br><span class="line">    button0=driver.find_elements_by_class_name(<span class="string">&#x27;get-btn&#x27;</span>)  <span class="comment">#定位领取金额</span></span><br><span class="line">    button1=button0[<span class="number">4</span>]   <span class="comment">#定位领取金额</span></span><br><span class="line">    button1.click()    <span class="comment">#点击领取键</span></span><br><span class="line">    button2=driver.find_element_by_link_text(<span class="string">&#x27;确定&#x27;</span>)  <span class="comment">#定位确定键</span></span><br><span class="line">    button2.click()   <span class="comment">#点击确定键</span></span><br><span class="line">    time.sleep(<span class="number">1</span>) https://www.nsrain.com/jd-coupon/</span><br></pre></td></tr></table></figure>

<p>虽然一秒很短，但这是抢券啊，1s也可能错过?</p>
<p>再用schedule加一个定时功能，先扫码登陆，再等待定时操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时刷新版v2.0</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time,schedule</span><br><span class="line">driver=webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;https://plus.jd.com/coupon/index&#x27;</span>)</span><br><span class="line"><span class="comment">#扫码登录时间，提前五分钟登陆</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>():</span></span><br><span class="line">    driver.get(<span class="string">&#x27;https://plus.jd.com/coupon/index&#x27;</span>)   <span class="comment">#刷新页面    </span></span><br><span class="line">    button0=driver.find_elements_by_class_name(<span class="string">&#x27;get-btn&#x27;</span>)</span><br><span class="line">    button1=button0[<span class="number">4</span>]</span><br><span class="line">    button1.click()</span><br><span class="line">    button2=driver.find_element_by_link_text(<span class="string">&#x27;确定&#x27;</span>)</span><br><span class="line">    button2.click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;操作成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">schedule.every().day.at(<span class="string">&quot;22:00&quot;</span>).do(job) <span class="comment">#定时执行点击</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">0.1</span>) <span class="comment">#每0.1s检查任务 https://www.nsrain.com/jd-coupon/              </span></span><br></pre></td></tr></table></figure>
<h6 id="-1"><a href="#-1" class="headerlink" title></a></h6><h1 id="最终效果：（水印没钱消）"><a href="#最终效果：（水印没钱消）" class="headerlink" title="最终效果：（水印没钱消）"></a>最终效果：（<del>水印没钱消</del>）</h1><p><img src="/2019/jd-coupon/img4.gif" alt="img4"></p>
<p>第一次抢到50的，纪念一波?</p>
<img src="/2019/jd-coupon/img5.jpg" alt="img5" style="zoom: 50%;"> 

<p>​     </p>
<blockquote>
<p><strong>Update[02/08/2020]:</strong> 现在发现京东直接去除了<del>网页版</del>抢券哈哈哈，绝了！ </p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>体验Modelarts实现花卉种类自动识别</title>
    <url>/2020/modelarts/</url>
    <content><![CDATA[<p><img src="/2020/modelarts/img1.jpg" alt="img1"></p>
<a id="more"></a>

<p>最近报名了一个绿盟竞赛，现在已经开始第一阶段的赋能赛了。要求是通过华为云的微认证，项目四选一… 看了一下觉得这个花卉识别的还蛮有意思，就进去做了一下。开始傻不拉几的用自己的账号部署OBS，突然发现不对劲，咋还要我付钱呢。一看原来是在实验室里用指定账号做… 这操作也行吧。</p>
<h6 id><a href="#" class="headerlink" title></a></h6><h1 id="华为云端实验室"><a href="#华为云端实验室" class="headerlink" title="华为云端实验室"></a>华为云端实验室</h1><p>这玩意还是蛮新奇的，貌似搞了个linux虚拟机限时实验，用IAM做了个实验账户给我登陆。</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.03.17.jpeg" alt="pic2020-08-12-10.03.17"></p>
<p>进来可以看到拓扑图和详细步骤，看上去没什么技术含量。行吧那就做呗，不要钱还不玩玩？</p>
<h6 id="-1"><a href="#-1" class="headerlink" title></a></h6><h1 id="开始玩耍"><a href="#开始玩耍" class="headerlink" title="开始玩耍"></a>开始玩耍</h1><p>进入沙盒，配置一个OBS来存数据，然后创建密钥。因为是linux，还要用终端来取密码……</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.07.19.jpeg" alt="pic2020-08-12-10.07.19"></p>
<p>设置好以后再配置开发环境，一个Notebook。</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.09.57.jpeg" alt="pic2020-08-12-10.09.57"></p>
<p>开始还在想花花的数据呢？咋没连接咧。原来直接用命令导入…</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.14.54.jpeg" alt="pic2020-08-12-10.14.54"></p>
<p>数据进了OBS以后就可以训练模型了。看了一下导入了大概7000多个文件。华为这个整合已经预置了算法，这里选用ResNet_v1_50，设置好以后开始训练。</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.19.17.jpeg" alt="pic2020-08-12-10.19.17"></p>
<p><img src="/2020/modelarts/pic2020-08-12-10.21.30.jpeg" alt="pic2020-08-12-10.21.30"></p>
<p>等了一会训练完成，开始部署模型，稍等片刻就可以玩耍了～</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.31.36.jpeg" alt="pic2020-08-12-10.31.36"></p>
<h6 id="-2"><a href="#-2" class="headerlink" title></a></h6><h1 id="识别花卉"><a href="#识别花卉" class="headerlink" title="识别花卉"></a>识别花卉</h1><p>这比想象中的还简单，华为做的这个ModelArts确实是一站式服务，高度集成。先看看提供的照片识别怎么样。</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.35.06.jpeg" alt="pic2020-08-12-10.35.06"></p>
<p><img src="/2020/modelarts/pic2020-08-12-10.35.57.jpeg" alt="pic2020-08-12-10.35.57"></p>
<p>看上去还不错，精度还可以。再去网上找几张试试看。</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.36.14.jpeg" alt="pic2020-08-12-10.36.14"></p>
<p>额，原来提供的数据总共就标记了四种花，传了个牵牛上去就懵逼了。行吧，既然还有时间，那再玩玩，上传些不是人的东西试试。</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.38.30.jpeg" alt="pic2020-08-12-10.38.30"></p>
<p>算出来天线宝宝和向日葵最像23333</p>
<p>最后再来测一个最美的花（逃</p>
<p><img src="/2020/modelarts/pic2020-08-12-10.37.28.jpeg" alt="pic2020-08-12-10.37.28"></p>
<h6 id="-3"><a href="#-3" class="headerlink" title></a></h6><h1 id="玩够了"><a href="#玩够了" class="headerlink" title="玩够了"></a>玩够了</h1><p>第一次白嫖体验了一下市面上这些集成”AI”产品，还是蛮好玩的。现在阿里云包装了这么多功能出售，二次开发也是很方便。做完了实验还要考试才能拿到认证…</p>
<p><img src="/2020/modelarts/img2.jpg" alt="img2"></p>
<p>赋能赛算是做完了，也就给预赛加个五分，同学貌似也没人玩这个，我一个人报名了两个队，哎。还是期待有什么题目嘿嘿，睡觉。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>NLP Notes Part One</title>
    <url>/2020/nlp-week1/</url>
    <content><![CDATA[<p>今天正式开始学习NLP，这周首先了解NLP相关概念，并配置好运行环境。下面是第一部分的笔记。</p>
<p><img src="/2020/nlp-week1/img0.jpg" alt="img0"></p>
<a id="more"></a>

<h1 id="NLP-Background"><a href="#NLP-Background" class="headerlink" title="NLP Background"></a>NLP Background</h1><h2 id="NLP-概念"><a href="#NLP-概念" class="headerlink" title="NLP 概念"></a>NLP 概念</h2><ul>
<li>NLP即Natural Language Processing，是一个结合了计算机科学，语言学，和AI机器学习的领域。</li>
<li>NLP可以解决的问题：<ol>
<li><strong>N</strong>atural <strong>L</strong>anguage <strong>U</strong>nderstanding，即将自然语言转化为计算机语言并进行分析</li>
<li><strong>N</strong>atural <strong>L</strong>anguage <strong>G</strong>enerating，即由计算机语言生成自然语言</li>
</ol>
</li>
</ul>
<h2 id="NLP-应用"><a href="#NLP-应用" class="headerlink" title="NLP 应用"></a>NLP 应用</h2><ul>
<li><strong>M</strong>achine <strong>T</strong>ranslation，典型代表有DeepL（非常好用）, Google Translator</li>
<li><strong>I</strong>nformation <strong>R</strong>etrieval (Search)，代表：Google</li>
<li>Text Categorization， 即文本分类，包括垃圾邮件识别，文字情感分析，和语音助手，如Siri</li>
<li>Entity Detection，即实体名称识别</li>
<li>Spelling and Grammer Checkers，如Grammarly（正在使用）</li>
</ul>
<h2 id="NLP-难点"><a href="#NLP-难点" class="headerlink" title="NLP 难点"></a>NLP 难点</h2><ul>
<li>自然语言解析成的数据非常稀疏</li>
<li>语言自身的模糊性造成歧义</li>
<li>语言种类繁多，每种语言需要不同的模型</li>
</ul>
<h1 id="Sentiment-Analysis"><a href="#Sentiment-Analysis" class="headerlink" title="Sentiment Analysis"></a>Sentiment Analysis</h1><h2 id="Traditional-ML"><a href="#Traditional-ML" class="headerlink" title="Traditional ML"></a>Traditional ML</h2><ul>
<li><strong>B</strong>ag <strong>o</strong>f <strong>W</strong>ords encoding</li>
<li>Hand designed features for negation handling</li>
</ul>
<h2 id="Deep-NLP"><a href="#Deep-NLP" class="headerlink" title="Deep NLP"></a>Deep NLP</h2><ul>
<li>Deep <strong>LSTM</strong></li>
<li>RecursiveNN (TreeRNN)</li>
</ul>
<p><img src="/2020/nlp-week1/img1.jpg" alt="img1"></p>
<p>Result generated by Sentimental Analysis Demo from Stanford NLP Group</p>
<h1 id="Basic-Pipeline"><a href="#Basic-Pipeline" class="headerlink" title="Basic Pipeline"></a>Basic Pipeline</h1><p><img src="/2020/nlp-week1/img2.jpg" alt="img2"></p>
<h2 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h2><p>将一句话按照语意切分成词语。因为一些语言如中文，阿拉伯语在切分上有一定难度，而英文可以直接按空格分开，所以暂时先从英文入门。</p>
<h2 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h2><p><strong>Basic preprocessing</strong></p>
<ul>
<li>将所有字母转为小写</li>
<li>去掉HTML标签</li>
</ul>
<p><strong>处理动词方法</strong></p>
<ul>
<li>Stemming，直接去掉ing等词尾，速度快</li>
<li>Lemmatization，将分词转化为原型，较慢</li>
</ul>
<h2 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h2><p><strong>Encoding</strong></p>
<ul>
<li>Bag of Words</li>
<li>N-gram ( N = 1, 2, 3, 4)</li>
</ul>
<p><strong>Embedding</strong></p>
<ul>
<li>Word2Vec (Skip-gram, CBOW )</li>
<li>Global Vectors</li>
<li>FastText</li>
</ul>
<h3 id="Bag-of-Words"><a href="#Bag-of-Words" class="headerlink" title="Bag of Words"></a>Bag of Words</h3><ul>
<li>创建一个词表，统计一句话中每个词出现的次数并计入表中</li>
<li>缺点：表不能太长也不能太短，太长了数据非常稀疏，太短了很多次在表里都找不到</li>
</ul>
<h2 id="Classifiers-Training"><a href="#Classifiers-Training" class="headerlink" title="Classifiers Training"></a>Classifiers Training</h2><h3 id="Statistics"><a href="#Statistics" class="headerlink" title="Statistics"></a>Statistics</h3><ul>
<li>Naive Bayes（朴素贝叶斯）</li>
</ul>
<h3 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h3><ul>
<li>Logistic Regression</li>
<li>Support Vector Machine (Linear Kernel)</li>
<li>Neural Network</li>
<li>Long Short Term Memory</li>
</ul>
<h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><h3 id="F-score"><a href="#F-score" class="headerlink" title="F-score"></a>F-score</h3><p><img src="/2020/nlp-week1/img3.jpg" alt="img3"></p>
<h3 id="Precision-amp-Recall"><a href="#Precision-amp-Recall" class="headerlink" title="Precision &amp; Recall"></a>Precision &amp; Recall</h3><ul>
<li><strong>Precision</strong> = true positive / selected</li>
<li><strong>Recall</strong> = true positive / relevant</li>
</ul>
<p><img src="/2020/nlp-week1/img4.jpg" alt="img4"></p>
<h3 id="TPR-amp-FPR"><a href="#TPR-amp-FPR" class="headerlink" title="TPR &amp; FPR"></a>TPR &amp; FPR</h3><ul>
<li><strong>True Positive Rate</strong> = true positive / relevant</li>
<li><strong>False Positive Rate</strong> = false positive / irrelevant</li>
</ul>
<p><img src="/2020/nlp-week1/img5.jpg" alt="img5"></p>
<h1 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h1><ul>
<li><p>由条件概率公式：<em>P(AB) = P(A) P(B|A) = P(B) P(A|B)</em> 可推导出贝叶斯公式：</p>
<p><img src="/2020/nlp-week1/img6.jpg" alt="img6"></p>
<p>设C为判断出的类别，D为Document（句子），P(D)是固定的，则：</p>
<p><em>P(C I D) = P(D | C) P(C), C(NB) = argmax P(D l C) P(C)</em></p>
<p>P(C) 为训练数据中某个情感的数据条数/总数据条数</p>
</li>
<li><p>假设句子中的每个单词相互独立, 则：</p>
<p>P(D) = P(d1) P(d2)… P(dn), 所以：</p>
<p><img src="/2020/nlp-week1/img7.jpg" alt="img7"></p>
</li>
<li><p>C即为判断结果，∏i 为连乘，P(di | C) 为需判断的句子中的词 di 在对应C情感的句子集合中的频率</p>
<p>如：<em>P(di | C=pos) = #(di,C=pos) / ∑#(di,C=pos)</em></p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>这周暂时还没有接触代码，但学习了很多的背景知识，还是蛮有意思的。</p>
</li>
<li><p>现在去配置运行环境。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentiment Analysis Part2</title>
    <url>/2020/nlp-week2/</url>
    <content><![CDATA[<p>这周正好没什么课，直接进入Part2。先尝试用Bag of Words来处理数据，然后用朴素贝叶斯方法进行预测。</p>
<h1 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h1><p><img src="/2020/nlp-week2/img1.jpg" alt="img1"></p>
<a id="more"></a>

<h1 id="获取IMDB评论数据"><a href="#获取IMDB评论数据" class="headerlink" title="获取IMDB评论数据"></a>获取IMDB评论数据</h1><p>第一步，先获取已经标注好情感的影评数据，然后查看数据样式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> nlp_proj_utils <span class="keyword">import</span> get_imdb_dataset</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;max_colwidth&#x27;</span>, <span class="number">500</span>)  <span class="comment"># Set display column width to show more content</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dataset, download if necessary</span></span><br><span class="line">train, test = get_imdb_dataset()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get a sample (head) of the data frame</span></span><br><span class="line">train.sample(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>随机抽取五条数据，可以看出分成两列，一列是包含html标签的影评，另一列是情感标记。</p>
<p><img src="/2020/nlp-week2/img2.jpg" alt="img2"></p>
<p>然后统计数据形态，可以发现train和test都有25000条数据，一般情况下，两者数量保持相近最佳。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;train shape:&#x27;</span>, train.shape)</span><br><span class="line">print(<span class="string">&#x27;test  shape:&#x27;</span>, test.shape)</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># train shape: (25000, 2)</span></span><br><span class="line"><span class="comment"># test  shape: (25000, 2)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Statics on tags</span></span><br><span class="line">train[<span class="string">&#x27;sentiment&#x27;</span>].value_counts()</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># neg    12500</span></span><br><span class="line"><span class="comment"># pos    12500</span></span><br><span class="line"><span class="comment"># Name: sentiment, dtype: int64</span></span><br></pre></td></tr></table></figure>

<h1 id="Preprocessing"><a href="#Preprocessing" class="headerlink" title="Preprocessing"></a>Preprocessing</h1><h2 id="Tokenization-and-Normalization"><a href="#Tokenization-and-Normalization" class="headerlink" title="Tokenization and Normalization"></a>Tokenization and Normalization</h2><p>预处理部分，需要：</p>
<ul>
<li>去掉影评数据中的html标签</li>
<li>去掉标点符号</li>
<li>将每个影评切分成tokens</li>
<li>将<strong>stopwords</strong>，如人称代词等对情感分析用处不大的词去掉</li>
<li>剩余词组进行lemmatization词形还原</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将标点符号转为&#x27; &#x27;</span></span><br><span class="line">transtbl = str.maketrans(string.punctuation, <span class="string">&#x27; &#x27;</span> * len(string.punctuation))</span><br><span class="line">stopwords = nltk.corpus.stopwords.words(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line">lemmatizer = nltk.WordNetLemmatizer()</span><br><span class="line"></span><br><span class="line">stopwords[:<span class="number">10</span>]</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># [&#x27;i&#x27;, &#x27;me&#x27;, &#x27;my&#x27;, &#x27;myself&#x27;, &#x27;we&#x27;, &#x27;our&#x27;, &#x27;ours&#x27;, &#x27;ourselves&#x27;, &#x27;you&#x27;, &quot;you&#x27;re&quot;]</span></span><br><span class="line"></span><br><span class="line">string.punctuation</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># &#x27;!&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首次使用nltk需要下载相关资源包</span></span><br><span class="line">nltk.download()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocessing</span>(<span class="params">line: str</span>) -&gt; str:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Take a text input and return the preprocessed string.</span></span><br><span class="line"><span class="string">    i.e.: 定义一个函数将影评语句预处理为由空格分开的字符串并返回</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 换标点符号为空格，去掉html标签</span></span><br><span class="line">    line = line.replace(<span class="string">&#x27;&lt;br /&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).translate(transtbl)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个包含不在stopwords中的单词组成的list</span></span><br><span class="line">    tokens = [lemmatizer.lemmatize(t.lower(),<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">              <span class="keyword">for</span> t <span class="keyword">in</span> nltk.word_tokenize(line)</span><br><span class="line">              <span class="keyword">if</span> t.lower() <span class="keyword">not</span> <span class="keyword">in</span> stopwords]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 以字符串形式返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(tokens)</span><br></pre></td></tr></table></figure>

<p>然后测试一条数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_str = <span class="string">&quot;I bought several books yesterday&lt;br /&gt; and I really love them!&quot;</span></span><br><span class="line">preprocessing(test_str)</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># &#x27;buy several book yesterday really love&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以看到得到的输出已完成预处理，下面就可以把所有影评都预处理了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm._tqdm_notebook <span class="keyword">import</span> tqdm_notebook</span><br><span class="line">tqdm_notebook.pandas()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用多线程可能出现其他问题，暂时不用</span></span><br><span class="line"><span class="comment"># If you&#x27;re using macOS and Linux, you may run un-comment the following code to speed up the preprocessing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># !pip install pandarallel</span></span><br><span class="line"><span class="comment"># from pandarallel import pandarallel</span></span><br><span class="line"><span class="comment"># pandarallel.initialize(progress_bar=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you&#x27;re using Windows, run the following, otherwise, comment this out, and run the second statement instead</span></span><br><span class="line"><span class="comment"># 添加一列数据&#x27;text_prep&#x27;，用来存放预处理好的影评</span></span><br><span class="line"><span class="keyword">for</span> df <span class="keyword">in</span> train, test:</span><br><span class="line">    df[<span class="string">&#x27;text_prep&#x27;</span>] = df[<span class="string">&#x27;text&#x27;</span>].progress_apply(preprocessing)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># If you&#x27;re using macOS or Linux, un-comment and run the following code</span></span><br><span class="line"><span class="comment"># for df in train, test:</span></span><br><span class="line"><span class="comment">#     df[&#x27;text_prep&#x27;] = df[&#x27;text&#x27;].parallel_apply(preprocessing)</span></span><br></pre></td></tr></table></figure>

<p>稍等片刻，完成后检验数据形态，并抽样检查</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> train.shape == (<span class="number">25000</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">assert</span> test.shape == (<span class="number">25000</span>, <span class="number">3</span>)</span><br><span class="line">train.sample(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/nlp-week2/img3.jpg" alt="img3"></p>
<p>可以看出，已经达到了预处理要求</p>
<h2 id="Build-Vocabulary"><a href="#Build-Vocabulary" class="headerlink" title="Build Vocabulary"></a>Build Vocabulary</h2><p>下一步，运用最简单的Bag of Words统计单词数据。</p>
<p>Instead of using <code>CountVectorizer</code> (N-gram) provided by sklearn directly, we will build the vocabulary on our own, so that we have more control over it.</p>
<p><strong>Tips:</strong> 只能使用train数据构建词库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将预处理的数据提取成所有单词的list</span></span><br><span class="line">all_words = [w <span class="keyword">for</span> text <span class="keyword">in</span> tqdm_notebook(train[<span class="string">&#x27;text_prep&#x27;</span>]) </span><br><span class="line">             <span class="keyword">for</span> w <span class="keyword">in</span> text.split()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用FreqDist统计每个词出现次数</span></span><br><span class="line">voca = nltk.FreqDist(all_words)</span><br><span class="line">print(voca)</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># &lt;FreqDist with 65102 samples and 3025774 outcomes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看词频最高的十个单词</span></span><br><span class="line">voca.most_common(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">[(<span class="string">&#x27;film&#x27;</span>, <span class="number">48184</span>),</span><br><span class="line"> (<span class="string">&#x27;movie&#x27;</span>, <span class="number">44024</span>),</span><br><span class="line"> (<span class="string">&#x27;one&#x27;</span>, <span class="number">26785</span>),</span><br><span class="line"> (<span class="string">&#x27;make&#x27;</span>, <span class="number">23568</span>),</span><br><span class="line"> (<span class="string">&#x27;like&#x27;</span>, <span class="number">22361</span>),</span><br><span class="line"> (<span class="string">&#x27;see&#x27;</span>, <span class="number">20792</span>),</span><br><span class="line"> (<span class="string">&#x27;get&#x27;</span>, <span class="number">18140</span>),</span><br><span class="line"> (<span class="string">&#x27;time&#x27;</span>, <span class="number">16167</span>),</span><br><span class="line"> (<span class="string">&#x27;good&#x27;</span>, <span class="number">15140</span>),</span><br><span class="line"> (<span class="string">&#x27;character&#x27;</span>, <span class="number">14172</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时先取前10000个词，后面太少见的舍去</span></span><br><span class="line">topwords = [word <span class="keyword">for</span> word, _ <span class="keyword">in</span> voca.most_common(<span class="number">10000</span>)]</span><br></pre></td></tr></table></figure>



<h2 id="Vectorizer"><a href="#Vectorizer" class="headerlink" title="Vectorizer"></a>Vectorizer</h2><p>先了解将单词数据向量化的方法，即用<strong>BoW</strong> (1-gram) 和 <strong>BoW with Tfidf Transformer</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> (</span><br><span class="line">    CountVectorizer, </span><br><span class="line">    TfidfTransformer, </span><br><span class="line">    TfidfVectorizer,)</span><br><span class="line">CountVectorizer()</span><br></pre></td></tr></table></figure>

<p>查看CountVectorizer接收的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CountVectorizer(analyzer=<span class="string">&#x27;word&#x27;</span>, binary=<span class="literal">False</span>, decode_error=<span class="string">&#x27;strict&#x27;</span>,</span><br><span class="line">                dtype=&lt;class &#x27;numpy.int64&#x27;&gt;, encoding=&#x27;utf-8&#x27;, input=&#x27;content&#x27;,</span><br><span class="line">                lowercase=<span class="literal">True</span>, max_df=<span class="number">1.0</span>, max_features=<span class="literal">None</span>, min_df=<span class="number">1</span>,</span><br><span class="line">                ngram_range=(<span class="number">1</span>, <span class="number">1</span>), preprocessor=<span class="literal">None</span>, stop_words=<span class="literal">None</span>,</span><br><span class="line">                strip_accents=<span class="literal">None</span>, token_pattern=<span class="string">&#x27;(?u)\\b\\w\\w+\\b&#x27;</span>,</span><br><span class="line">                tokenizer=<span class="literal">None</span>, vocabulary=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p><code>ngram_range=(1, 1)</code> 意思是一维N-gram，即<strong>BOW</strong>，若要取2，则是(2,2)</p>
<h2 id="Tf–idf-Transformer是什么？"><a href="#Tf–idf-Transformer是什么？" class="headerlink" title="Tf–idf Transformer是什么？"></a>Tf–idf Transformer是什么？</h2><ul>
<li><p>Tf: Term-Frequency，即词频</p>
</li>
<li><p>idf: Inverse Document-Frequency</p>
</li>
<li><p>Tf-idf = $tf(t,d) \times idf(t)$</p>
</li>
<li><p>Tf: Term-Frequency</p>
</li>
<li><p>idf: Inverse Document-Frequency</p>
</li>
<li><p>Tf-idf = 𝑡𝑓(𝑡,𝑑) × 𝑖𝑑𝑓(𝑡)</p>
<p><img src="/2020/nlp-week2/img5.jpg" alt="img5"></p>
</li>
</ul>
<p>据我理解，所谓的<strong>Tf-idf</strong>，就是通过一个log函数计算出某个词对情感分析的作用大小，量化为数值，然后再乘词频，以达到调整分析中各种单词的权重。例如：</p>
<blockquote>
<p>Sentence 1: The boy <strong>love</strong> the toy</p>
<p>Sentence 2: The boy <strong>hate</strong> the toy</p>
</blockquote>
<p>因为boy在两句话中都出现了，对情感判断没有太大帮助，所以要降低权重。因此<strong>love</strong>和<strong>hate</strong>这样的词，算出来的<strong>Tf-idf</strong>值远比boy要高。下面用测试数据来试验：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">transformer = TfidfTransformer(smooth_idf=<span class="literal">False</span>)</span><br><span class="line">transformer</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># TfidfTransformer(norm=&#x27;l2&#x27;, smooth_idf=False, sublinear_tf=False, use_idf=True)</span></span><br><span class="line"></span><br><span class="line">counts = [[<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">          [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">tfidf = transformer.fit_transform(counts)</span><br><span class="line">tfidf</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># &lt;6x3 sparse matrix of type &#x27;&lt;class &#x27;numpy.float64&#x27;&gt;&#x27;</span></span><br><span class="line"><span class="comment">#   with 9 stored elements in Compressed Sparse Row format&gt;</span></span><br><span class="line"></span><br><span class="line">tfidf.toarray()</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">0.81940995</span>, <span class="number">0.</span>        , <span class="number">0.57320793</span>],</span><br><span class="line">       [<span class="number">1.</span>        , <span class="number">0.</span>        , <span class="number">0.</span>        ],</span><br><span class="line">       [<span class="number">1.</span>        , <span class="number">0.</span>        , <span class="number">0.</span>        ],</span><br><span class="line">       [<span class="number">1.</span>        , <span class="number">0.</span>        , <span class="number">0.</span>        ],</span><br><span class="line">       [<span class="number">0.47330339</span>, <span class="number">0.88089948</span>, <span class="number">0.</span>        ],</span><br><span class="line">       [<span class="number">0.58149261</span>, <span class="number">0.</span>        , <span class="number">0.81355169</span>]])</span><br></pre></td></tr></table></figure>

<p>假设一个counts中，每一行代表一个句子，每个句子都由三个单词组成，数字代表词频。计算出结果可以发现，第二个词的<strong>Tf-idf</strong>更高</p>
<p>实际上，在sklearn中，<code>TfidfVectorizer</code> 就是 <code>CountVectorizer</code> + <code>TfidTransformer</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TfidfVectorizer()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TfidfVectorizer(analyzer=<span class="string">&#x27;word&#x27;</span>, binary=<span class="literal">False</span>, decode_error=<span class="string">&#x27;strict&#x27;</span>,</span><br><span class="line">                dtype=&lt;class &#x27;numpy.float64&#x27;&gt;, encoding=&#x27;utf-8&#x27;,</span><br><span class="line">                input=<span class="string">&#x27;content&#x27;</span>, lowercase=<span class="literal">True</span>, max_df=<span class="number">1.0</span>, max_features=<span class="literal">None</span>,</span><br><span class="line">                min_df=<span class="number">1</span>, ngram_range=(<span class="number">1</span>, <span class="number">1</span>), norm=<span class="string">&#x27;l2&#x27;</span>, preprocessor=<span class="literal">None</span>,</span><br><span class="line">                smooth_idf=<span class="literal">True</span>, stop_words=<span class="literal">None</span>, strip_accents=<span class="literal">None</span>,</span><br><span class="line">                sublinear_tf=<span class="literal">False</span>, token_pattern=<span class="string">&#x27;(?u)\\b\\w\\w+\\b&#x27;</span>,</span><br><span class="line">                tokenizer=<span class="literal">None</span>, use_idf=<span class="literal">True</span>, vocabulary=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>用上面的例子来测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tfidf</span></span><br><span class="line">t_tfidf_vec = TfidfVectorizer()</span><br><span class="line">t_tfidf_vec.fit(<span class="string">&#x27; &#x27;</span>.join(t_corpus).split())</span><br><span class="line">t_tfidf_vec.transform(t_corpus).toarray()</span><br><span class="line">t_corpus = [<span class="string">&#x27;the boy love the toy&#x27;</span>, <span class="string">&#x27;the boy hate the toy&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bag of words</span></span><br><span class="line"><span class="comment"># Voc = [&#x27;boy&#x27;, &#x27;hate&#x27;, &#x27;love&#x27;, &#x27;the&#x27;, &#x27;toy&#x27;]</span></span><br><span class="line"></span><br><span class="line">t_cnt_vec = CountVectorizer()</span><br><span class="line"><span class="comment"># fit一般只用于train数据</span></span><br><span class="line">t_cnt_vec.fit(<span class="string">&#x27; &#x27;</span>.join(t_corpus).split())</span><br><span class="line">t_cnt_vec.transform(t_corpus).toarray()</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tfidf</span></span><br><span class="line">t_tfidf_vec = TfidfVectorizer()</span><br><span class="line">t_tfidf_vec.fit(<span class="string">&#x27; &#x27;</span>.join(t_corpus).split())</span><br><span class="line">t_tfidf_vec.transform(t_corpus).toarray()</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([[<span class="number">0.41508858</span>, <span class="number">0.</span>        , <span class="number">0.48828702</span>, <span class="number">0.6457389</span> , <span class="number">0.41508858</span>],</span><br><span class="line">       [<span class="number">0.41508858</span>, <span class="number">0.48828702</span>, <span class="number">0.</span>        , <span class="number">0.6457389</span> , <span class="number">0.41508858</span>]])</span><br></pre></td></tr></table></figure>



<h2 id="Vectorization-Featurization"><a href="#Vectorization-Featurization" class="headerlink" title="Vectorization / Featurization"></a>Vectorization / Featurization</h2><p>接下来将影评数据向量化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_x, train_y = train[<span class="string">&#x27;text_prep&#x27;</span>], train[<span class="string">&#x27;sentiment&#x27;</span>]</span><br><span class="line">test_x, test_y = test[<span class="string">&#x27;text_prep&#x27;</span>], test[<span class="string">&#x27;sentiment&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use topwords as vocabulary</span></span><br><span class="line">tf_vec = TfidfVectorizer(vocabulary=topwords)</span><br><span class="line"></span><br><span class="line">train_features = tf_vec.fit_transform(train_x)</span><br><span class="line">test_features = tf_vec.transform(test_x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据形态</span></span><br><span class="line"><span class="keyword">assert</span> train_features.shape == (<span class="number">25000</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="keyword">assert</span> test_features.shape == (<span class="number">25000</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前50个结果</span></span><br><span class="line">train_features[<span class="number">0</span>][:<span class="number">50</span>].toarray()</span><br></pre></td></tr></table></figure>

<p>可以看出得到的数据非常稀疏</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([[<span class="number">0.</span>       , <span class="number">0.1287998</span>, <span class="number">0.</span>       , ..., <span class="number">0.</span>       , <span class="number">0.</span>       ,</span><br><span class="line">        <span class="number">0.</span>       ]])</span><br></pre></td></tr></table></figure>

<h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><p>对于训练模型部分，要建立影评和情感的联系，可以使用朴素贝叶斯方法，这里使用<a href="http://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html">Multinomial NB</a>库实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"></span><br><span class="line">mnb_model = MultinomialNB()</span><br><span class="line">mnb_model</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)</span></span><br><span class="line"></span><br><span class="line">%%time</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train Model</span></span><br><span class="line">mnb_model.fit(train_features, train_y)</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># CPU times: user 72.4 ms, sys: 18.6 ms, total: 91 ms</span></span><br><span class="line"><span class="comment"># Wall time: 93.8 ms</span></span><br></pre></td></tr></table></figure>

<p>可以发现NB方法速度非常快</p>
<h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>接下来用test数据对模型正确率进行评估</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict on test set</span></span><br><span class="line">pred = mnb_model.predict(test_features)</span><br><span class="line">print(pred)</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># [&#x27;neg&#x27; &#x27;pos&#x27; &#x27;pos&#x27; ... &#x27;neg&#x27; &#x27;neg&#x27; &#x27;neg&#x27;]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Accuracy: %f&#x27;</span> % metrics.accuracy_score(pred,test_y))</span><br><span class="line"><span class="comment">#Out</span></span><br><span class="line"><span class="comment"># Accuracy: 0.833000</span></span><br></pre></td></tr></table></figure>

<p>得到目前的模型正确率是0.833</p>
<p>It doesn’t matter if you change the order of <code>pred</code> and <code>test_y</code> passed into <code>accuracy_score</code> since the metrics is symmetric. <strong>However</strong>, it is extremely important that you pass them in the correct order when you need to calculate per-class metrics like f-score.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pass in as keyword arguments to make sure the order is correct</span></span><br><span class="line">print(</span><br><span class="line">    metrics.classification_report(y_true=test_y, y_pred=pred))</span><br></pre></td></tr></table></figure>

<pre><code>              precision    recall  f1-score   support

         neg       0.81      0.87      0.84     12500
         pos       0.86      0.80      0.83     12500

    accuracy                           0.83     25000
   macro avg       0.83      0.83      0.83     25000
weighted avg       0.83      0.83      0.83     25000</code></pre>
<p>从分类器报告可以看出，这个模型偏向于把输入判定为负面影评, f-score在0.83左右</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example from sklearn documentation</span></span><br><span class="line"></span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">target_names = [<span class="string">&#x27;class 0&#x27;</span>, <span class="string">&#x27;class 1&#x27;</span>, <span class="string">&#x27;class 2&#x27;</span>]</span><br><span class="line">print(metrics.classification_report(y_true, y_pred, target_names=target_names))</span><br></pre></td></tr></table></figure>

<pre><code>              precision    recall  f1-score   support

     class 0       0.50      1.00      0.67         1
     class 1       0.00      0.00      0.00         1
     class 2       1.00      0.67      0.80         3

    accuracy                           0.60         5
   macro avg       0.50      0.56      0.49         5
weighted avg       0.70      0.60      0.61         5</code></pre>
<h1 id="Predict-new-text"><a href="#Predict-new-text" class="headerlink" title="Predict new text"></a>Predict new text</h1><p>现在使用模型来预测一个新的文本，首先定义一个函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_new</span>(<span class="params">prep_func,  <span class="comment"># func for preprocessing</span></span></span></span><br><span class="line"><span class="function"><span class="params">                vec,        <span class="comment"># vectorizer</span></span></span></span><br><span class="line"><span class="function"><span class="params">                model,      <span class="comment"># model</span></span></span></span><br><span class="line"><span class="function"><span class="params">                text</span>):</span>      <span class="comment"># text</span></span><br><span class="line">    </span><br><span class="line">    prep_text = prep_func(text)</span><br><span class="line">    <span class="comment"># 以list的形式tranform</span></span><br><span class="line">    features = vec.transform([prep_text])</span><br><span class="line">    pred = model.predict(features)</span><br><span class="line">    <span class="comment"># 只需要预测一条数据</span></span><br><span class="line">    <span class="keyword">return</span> pred[<span class="number">0</span>]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">predict_new_p1 = partial(predict_new, preprocessing, tf_vec, mnb_model)</span><br><span class="line">predict_new_p1(<span class="string">&#x27;It looks great&#x27;</span>)</span><br><span class="line"><span class="comment"># Out </span></span><br><span class="line"><span class="comment"># &#x27;pos&#x27;</span></span><br></pre></td></tr></table></figure>

<p>预测成功！</p>
<h1 id="Tunning-hyper-parameters"><a href="#Tunning-hyper-parameters" class="headerlink" title="Tunning hyper parameters"></a>Tunning hyper parameters</h1><p>为了提高模型正确率，需要调整一些瞎编的参数，比如刚刚取的“前10000”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_with_n_topwords</span>(<span class="params">n: int, tfidf=False</span>) -&gt; tuple:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Train and get the accuracy with different model settings</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        n: number of features (top frequent words in the vocabulary)</span></span><br><span class="line"><span class="string">        tfidf: whether do tf-idf re-weighting or not</span></span><br><span class="line"><span class="string">    Outputs:</span></span><br><span class="line"><span class="string">        tuple: (accuracy score, classifier, vectorizer)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    topwords = [word <span class="keyword">for</span> word, _ <span class="keyword">in</span> voca.most_common(n)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> tfidf:</span><br><span class="line">        vec = TfidfVectorizer(vocabulary=topwords)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        vec = CountVectorizer(vocabulary=topwords)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Generate feature vectors 生成向量化数据</span></span><br><span class="line">    train_features = vec.fit_transform(train_x)</span><br><span class="line">    test_features  = vec.transform(test_x)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 用NB建立模型</span></span><br><span class="line">    mnb_model = MultinomialNB()</span><br><span class="line">    mnb_model.fit(train_features, train_y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Test predict</span></span><br><span class="line">    pred = mnb_model.predict(test_features)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> metrics.accuracy_score(pred, test_y), mnb_model, vec</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试取前500词时的模型正确率</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_with_n_topwords(<span class="number">500</span>, tfidf=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">(<span class="number">0.82516</span>,</span><br><span class="line"> MultinomialNB(alpha=<span class="number">1.0</span>, class_prior=<span class="literal">None</span>, fit_prior=<span class="literal">True</span>),</span><br><span class="line"> TfidfVectorizer(analyzer=<span class="string">&#x27;word&#x27;</span>, binary=<span class="literal">False</span>, decode_error=<span class="string">&#x27;strict&#x27;</span>,</span><br><span class="line">                 dtype=&lt;class &#x27;numpy.float64&#x27;&gt;, encoding=&#x27;utf-8&#x27;,</span><br><span class="line">                 input=<span class="string">&#x27;content&#x27;</span>, lowercase=<span class="literal">True</span>, max_df=<span class="number">1.0</span>, max_features=<span class="literal">None</span>,</span><br><span class="line">                 min_df=<span class="number">1</span>, ngram_range=(<span class="number">1</span>, <span class="number">1</span>), norm=<span class="string">&#x27;l2&#x27;</span>, preprocessor=<span class="literal">None</span>,</span><br><span class="line">                 smooth_idf=<span class="literal">True</span>, stop_words=<span class="literal">None</span>, strip_accents=<span class="literal">None</span>,</span><br><span class="line">                 sublinear_tf=<span class="literal">False</span>, token_pattern=<span class="string">&#x27;(?u)\\b\\w\\w+\\b&#x27;</span>,</span><br><span class="line">                 tokenizer=<span class="literal">None</span>, use_idf=<span class="literal">True</span>,</span><br><span class="line">                 vocabulary=[<span class="string">&#x27;film&#x27;</span>, <span class="string">&#x27;movie&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;make&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;see&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;character&#x27;</span>, <span class="string">&#x27;go&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;even&#x27;</span>, <span class="string">&#x27;would&#x27;</span>, <span class="string">&#x27;think&#x27;</span>, <span class="string">&#x27;story&#x27;</span>, <span class="string">&#x27;really&#x27;</span>, <span class="string">&#x27;well&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;show&#x27;</span>, <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;much&#x27;</span>, <span class="string">&#x27;say&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;know&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;people&#x27;</span>, <span class="string">&#x27;bad&#x27;</span>, <span class="string">&#x27;also&#x27;</span>, <span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;great&#x27;</span>, <span class="string">&#x27;give&#x27;</span>, ...]))</span><br></pre></td></tr></table></figure>

<p>测试取前500-10000词时的模型正确率，并绘制统计图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">possible_n = [<span class="number">500</span> * i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">cnt_accuracies = []</span><br><span class="line">tfidf_accuracies = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> tqdm_notebook(possible_n):</span><br><span class="line">    cnt_accuracies.append(train_with_n_topwords(n)[<span class="number">0</span>])</span><br><span class="line">    tfidf_accuracies.append(train_with_n_topwords(n, tfidf=<span class="literal">True</span>)[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">%config InlineBackend.figure_format=<span class="string">&#x27;retina&#x27;</span></span><br><span class="line"></span><br><span class="line">plt.plot(possible_n, cnt_accuracies, label=<span class="string">&#x27;Word Count&#x27;</span>)</span><br><span class="line">plt.plot(possible_n, tfidf_accuracies, label=<span class="string">&#x27;Tf-idf&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2020/nlp-week2/img4.jpg" alt="img4"></p>
<h1 id="Save-model"><a href="#Save-model" class="headerlink" title="Save model"></a>Save model</h1><p>最后，可以用<code>pickle</code>保存计算好的模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_, model, vec = train_with_n_topwords(<span class="number">3000</span>, tfidf=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;tf_vec.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    pickle.dump(vec, fp)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;mnb_model.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    pickle.dump(model, fp)</span><br><span class="line"></span><br><span class="line">!ls</span><br></pre></td></tr></table></figure>

<pre><code>__pycache__                 resources
mnb_model.pkl               sentiment_analysis_p1.ipynb
nlp_proj_utils.py           tf_vec.pkl</code></pre>
<p>使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;tf_vec.pkl&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    loaded_tf_vec = pickle.load(fp)</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天真正地在自己的电脑上跑了一个最简单的NLP，发现Jupyter Notebook可以以这样的方式一句一句的执行Python代码，同时还可以嵌入Markdown，确实是一个强悍的Notebook。虽然目前用的方法都是最简单最理想化的，但同样也跟数学紧密结合，而且最重要的是让我熟悉了一个实际的NLP预测流程到底有哪些步骤。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentiment Analysis Part3</title>
    <url>/2020/nlp-week3/</url>
    <content><![CDATA[<h1 id="Basics-in-Neural-Network"><a href="#Basics-in-Neural-Network" class="headerlink" title="Basics in Neural Network"></a>Basics in Neural Network</h1><p>在上一个部分，使用了朴素贝叶斯这样的统计学模型来预测，今天来尝试使用神经网络建立模型，首先明确一些神经网络中的基本概念。</p>
<h2 id="One-Hot-Encodings"><a href="#One-Hot-Encodings" class="headerlink" title="One Hot Encodings"></a>One Hot Encodings</h2><p>独热编码，即在处理多分类问题时，用向量来表示每种结果。比如【0，1，2】则可表示为</p>
<a id="more"></a>

<p>[1,0,0], [1,0,0], [1,0,0]</p>
<h2 id="Sigmoid-amp-Softmax"><a href="#Sigmoid-amp-Softmax" class="headerlink" title="Sigmoid &amp; Softmax"></a>Sigmoid &amp; Softmax</h2><p>在做完逻辑回归(logistic regression)后，在Neural Network输出层通常需要把线性结果转化为非线性。二分类问题通常用Sigmoid函数，而多分类问题则通常用softmax，即将[a,b,c]这样的向量通过 <em>Z = e^yi / ∑e^yi</em> 转化为和为1的向量。</p>
<p><img src="/2020/nlp-week3/img1.png" alt="img1"></p>
<h2 id="Activaton-Function"><a href="#Activaton-Function" class="headerlink" title="Activaton Function"></a>Activaton Function</h2><p>在Neural Network的中间层，通常需要如 sigmoid/ tanh/ relu 这样的激活函数。但sigmoid有gradient vanish的问题，所以一般用relu作为激活函数。</p>
<h2 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h2><p>在Neural Network模型中通常需要迭代训练，一般会用到gradient descent，sgd（部分优化，一次64或128），rmsprop，adam这样的优化器。</p>
<h2 id="Epoch"><a href="#Epoch" class="headerlink" title="Epoch"></a>Epoch</h2><p>每当模型看完一整遍以后即为一个Epoch训练完成了。在训练中至少要达到一个Epoch。</p>
<h2 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h2><p>一个模型如果对一个数据集多次训练，那么这个模型很可能会过拟合（Overfit），所以需要用另一部分数据做辅助训练（Validation）。当损失曲线开始回弹时就应该停止训练。</p>
<p><img src="/2020/nlp-week3/img2.jpg" alt="img2"></p>
<h1 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h1><p>For this section, we will introduce some basis about neural network and define a basic NN using PyTorch. </p>
<h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><p>一般来说，逻辑回归可以看作是单层神经网络（<strong>1-Layer NN</strong>），下面建立一个模型</p>
<p><img src="/2020/nlp-week3/img3.jpg" alt="img3"></p>
<p>There are two ways to build a model in PyTorch:</p>
<ol>
<li>Define a new Model class from <code>nn.Module</code> base class. Override <code>__init__</code> and <code>forward</code>.</li>
<li>Define a <code>nn.Sequential</code> and add layers one by one</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model, Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Input, Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"></span><br><span class="line">lr_model = Sequential()</span><br><span class="line"><span class="comment">#只需要一层，输入数据有两列，激活函数选用sigmoid</span></span><br><span class="line">lr_model.add(Dense(<span class="number">1</span>, input_dim=<span class="number">2</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)) <span class="comment"># output layer</span></span><br><span class="line"></span><br><span class="line">lr_model.summary()</span><br></pre></td></tr></table></figure>

<p>可以看到逻辑回归中有三个参数可以训练</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dense (Dense)                (None, 1)                 3         </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 3</span><br><span class="line">Trainable params: 3</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>

<p>接下来开始迭代训练模型并绘制损失曲线：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr_model.compile(</span><br><span class="line">    loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,</span><br><span class="line">    optimizer=<span class="string">&#x27;sgd&#x27;</span>,</span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>], )</span><br><span class="line"></span><br><span class="line">lr_history = lr_model.fit(</span><br><span class="line">    train_x, </span><br><span class="line">    train_y, </span><br><span class="line">    epochs=<span class="number">500</span>, <span class="comment"># Intend to set a large number here for demonstration</span></span><br><span class="line">    validation_data=(test_x, test_y), )</span><br><span class="line"></span><br><span class="line">utils.plot_history(lr_history, [<span class="string">&#x27;loss&#x27;</span>, <span class="string">&#x27;val_loss&#x27;</span>])</span><br><span class="line"></span><br><span class="line">lr_model.evaluate(test_x, test_y)</span><br></pre></td></tr></table></figure>

<p>可以发现在迭代了500次以后，辅助训练的损失曲线已经不再下降，说明模型已经过拟合。而在统计图中可以看出逻辑回归得到的结果基本是线性的。</p>
<p><img src="/2020/nlp-week3/img4.jpg" alt="img4"></p>
<h2 id="Neural-Network-1"><a href="#Neural-Network-1" class="headerlink" title="Neural Network"></a>Neural Network</h2><p>对于无法线性分割的数据，逻辑回归效果并不好。所以尝试用多层神经网络来训练。和逻辑回归不同的是，将加入中间的隐藏层。而随着层数的增加，神经网络模型能够抽象的能力就越强，再通过反馈调整每个神经元就可以不断提高准确率。</p>
<p><img src="/2020/nlp-week3/img5.jpg" alt="img5"></p>
<p>首先定义一个函数用来叠加层。虽然功能和<code>Sequential()</code>差不多，但手动定义的好处是可以自己添加中间处理步骤。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_nn_model</span>(<span class="params">input_dim, layers, output_dim</span>):</span></span><br><span class="line">    <span class="comment"># Input layer</span></span><br><span class="line">    X = Input(shape=(input_dim,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Hidden layer(s)</span></span><br><span class="line">    H = X</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> layers:</span><br><span class="line">        H = Dense(layer, activation=<span class="string">&#x27;relu&#x27;</span>)(H)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Output layer</span></span><br><span class="line">    activation_func = <span class="string">&#x27;softmax&#x27;</span> <span class="keyword">if</span> output_dim &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;sigmoid&#x27;</span></span><br><span class="line">    </span><br><span class="line">    Y = Dense(output_dim, activation=activation_func)(H)</span><br><span class="line">    <span class="keyword">return</span> Model(inputs=X, outputs=Y)</span><br><span class="line"></span><br><span class="line">nn_model = build_nn_model(</span><br><span class="line">    input_dim=<span class="number">2</span>,</span><br><span class="line">    layers=[<span class="number">8</span>],</span><br><span class="line">    output_dim=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line">nn_model.summary()</span><br></pre></td></tr></table></figure>

<p>可以看出中间层有八个神经元，输出层一个，总共有33个可训练参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model: &quot;model&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">input_1 (InputLayer)         [(None, 2)]               0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None, 8)                 24        </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (None, 1)                 9         </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 33</span><br><span class="line">Trainable params: 33</span><br><span class="line">Non-trainable params: 0</span><br></pre></td></tr></table></figure>

<p>接下来开始训练模型，使用<code>Adam</code>作为优化器,并且统计准确率绘制图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nn_model.compile(</span><br><span class="line">    loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,</span><br><span class="line">    optimizer=Adam(learning_rate=<span class="number">0.02</span>),</span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">nn_history = nn_model.fit(</span><br><span class="line">    train_x, </span><br><span class="line">    train_y, </span><br><span class="line">    epochs=<span class="number">500</span>, </span><br><span class="line">    validation_data=(test_x, test_y), )</span><br><span class="line"></span><br><span class="line">utils.plot_history(nn_history, [<span class="string">&#x27;loss&#x27;</span>, <span class="string">&#x27;val_loss&#x27;</span>])</span><br><span class="line"></span><br><span class="line">nn_model.evaluate(test_x, test_y)</span><br><span class="line"></span><br><span class="line">utils.plot_decision_boundary(nn_model, test_x, test_y)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/nlp-week3/img6.jpg" alt="img6"></p>
<p>从结果可以发现，用多层神经网络模型在500次训练后可以达到100%拟合，并且是非线性的。但是辅助训练的损失曲线也不再下降。</p>
<h1 id="Word-Embedding"><a href="#Word-Embedding" class="headerlink" title="Word Embedding"></a>Word Embedding</h1><p>在Bag of words中，每一个句子都被转化为非常稀疏的向量，并且丢失了相邻单词的联系。而Word Embedding可以解决这些问题。通常来说，这种方法可以把每个词都转化为长度50，150或300的致密向量，从而节省了许多空间。</p>
<p>一般吧Embeddings分为两类：</p>
<ul>
<li><p><strong>Task specific</strong></p>
<p>这类训练需要监管（supervised），适应特定问题。</p>
</li>
<li><p><strong>General</strong></p>
<p>这类不需要监管（unsupervised），单独训练后可以经过调整（fine tuned），用于指定的任务。</p>
</li>
</ul>
<h2 id="Task-specific"><a href="#Task-specific" class="headerlink" title="Task specific"></a>Task specific</h2><p><img src="/2020/nlp-week3/img7.jpg" alt="img7"></p>
<p>Task specific有如下几个特征：</p>
<ul>
<li>这样训练得到的模型可以很好的提高特定任务的准确率</li>
<li>得到的模型不能用于其他目的</li>
<li>训练时间较长，因为词语量较大</li>
<li>数据集比较小（supervised）</li>
</ul>
<h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><p>Example: Word2Uec</p>
<ul>
<li>依然是分类问题。类别的数量是单词量的大小，也就是说预测的是某一个词特定的意思</li>
<li>属于Unsupervised Learning，但依然需要feature label，但都是由数据集自动生成的</li>
</ul>
<p><img src="/2020/nlp-week3/img8.jpg" alt="img8"></p>
<p><strong>训练目标：</strong></p>
<ul>
<li>给出一些上下文词语，预测缺失的中心词</li>
<li>给出中心词，预测上下文（Single Distribution）</li>
</ul>
<p>特点：</p>
<ol>
<li>可用于不同任务，因为训练中学习的是单词本身的意思</li>
<li>可以快速获得大量数据，比如<code>Wikipedia</code></li>
</ol>
<h2 id="Emoji-Classifier"><a href="#Emoji-Classifier" class="headerlink" title="Emoji Classifier"></a>Emoji Classifier</h2><p><img src="/2020/nlp-week3/img9.png" alt="img9"></p>
<p>接下来用Word Embedding来做一个Emoji预测。期望是输入不同的句子能够返回对应的表情。首先导入训练和测试数据，并且下载一个General Embedding <code>glove</code>，这里只需要用第二部分<code>word_to_vec</code>中的数据。之所以暂时不考虑自己训练一个Word Embedding, 是因为比较复杂且时间和硬件成本较高。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_x, test_x, train_y, test_y = utils.load_emoji()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Download and load word embeddings</span></span><br><span class="line"><span class="comment"># This util function returns two dict: word_to_index and word_to_vec</span></span><br><span class="line"><span class="comment"># At this moment, we only need the second part</span></span><br><span class="line">_, word_to_vec_map = utils.load_glove_vecs()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the first 5 samples</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(train_x[i], utils.label_to_emoji(train_y[i]))</span><br></pre></td></tr></table></figure>

<p>打印前五个训练数据，可以看到每个句子对应一个表情：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">never talk to me again 😞</span><br><span class="line">I am proud of your achievements 😄</span><br><span class="line">It is the worst day in my life 😞</span><br><span class="line">Miss you so much ❤️</span><br><span class="line">food is life 🍴</span><br></pre></td></tr></table></figure>

<p>接下来把训练和测试数据的lebal转为前面提到的独热编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Convert output to one hot vector</span></span><br><span class="line">train_y_oh = utils.convert_to_one_hot(train_y, <span class="number">5</span>)</span><br><span class="line">test_y_oh = utils.convert_to_one_hot(test_y, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(train_y[<span class="number">0</span>], <span class="string">&quot;is converted into one hot&quot;</span>, train_y_oh[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># 3 is converted into one hot [0. 0. 0. 1. 0.]</span></span><br></pre></td></tr></table></figure>

<p>然后将”I like it”这句话用Embedding转化为向量，每个单词的向量长度为50，将所有单词向量求平均：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">avg = utils.sentence_to_avg(<span class="string">&quot;I like it&quot;</span>, word_to_vec_map)</span><br><span class="line">avg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line">array([ <span class="number">0.36627333</span>,  <span class="number">0.04672333</span>, <span class="number">-0.138081</span>  , <span class="number">-0.24937467</span>,  <span class="number">0.48939667</span>,</span><br><span class="line">        <span class="number">0.04623667</span>, <span class="number">-0.47231333</span>, <span class="number">-0.14826667</span>, <span class="number">-0.457185</span>  ,  <span class="number">0.20397252</span>,</span><br><span class="line">       <span class="number">-0.10503</span>   ,  <span class="number">0.60011667</span>, <span class="number">-0.61682667</span>, <span class="number">-0.1575</span>    ,  <span class="number">0.78038333</span>,</span><br><span class="line">        <span class="number">0.55919</span>   ,  <span class="number">0.29008333</span>,  <span class="number">0.34581633</span>, <span class="number">-0.22630233</span>, <span class="number">-0.70794</span>   ,</span><br><span class="line">       <span class="number">-0.30531333</span>,  <span class="number">0.34949667</span>,  <span class="number">0.46258333</span>,  <span class="number">0.234054</span>  ,  <span class="number">0.63990667</span>,</span><br><span class="line">       <span class="number">-2.12683333</span>, <span class="number">-1.06518</span>   ,  <span class="number">0.45987</span>   ,  <span class="number">0.74048667</span>, <span class="number">-0.92987667</span>,</span><br><span class="line">        <span class="number">3.59586667</span>,  <span class="number">0.33653667</span>, <span class="number">-0.282609</span>  , <span class="number">-0.01870267</span>, <span class="number">-0.19816133</span>,</span><br><span class="line">       <span class="number">-0.202</span>     ,  <span class="number">0.05308333</span>,  <span class="number">0.35650667</span>,  <span class="number">0.30246667</span>, <span class="number">-0.23844333</span>,</span><br><span class="line">       <span class="number">-0.07741177</span>,  <span class="number">0.226214</span>  , <span class="number">-0.09908807</span>,  <span class="number">0.37313</span>   ,  <span class="number">0.06784867</span>,</span><br><span class="line">        <span class="number">0.37182667</span>, <span class="number">-0.147618</span>  , <span class="number">-0.43038933</span>, <span class="number">-0.25390733</span>,  <span class="number">0.44703333</span>])</span><br></pre></td></tr></table></figure>

<p>可以看到正常输出了。接下来把所有训练和测试的句子全部转化，将中间层设置为50个神经元，多分类问题训练中使用<code>adam</code>作优化器，<code>categorical_crossentropy</code>制作损失曲线，并统计准确率：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_x = np.array(</span><br><span class="line">    [utils.sentence_to_avg(x, word_to_vec_map) <span class="keyword">for</span> x <span class="keyword">in</span> train_x])</span><br><span class="line"></span><br><span class="line">test_x = np.array(</span><br><span class="line">    [utils.sentence_to_avg(x, word_to_vec_map) <span class="keyword">for</span> x <span class="keyword">in</span> test_x])</span><br><span class="line"></span><br><span class="line">emoji_model = build_nn_model(</span><br><span class="line">    input_dim=<span class="number">50</span>, </span><br><span class="line">    layers=[<span class="number">50</span>], </span><br><span class="line">    output_dim=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">emoji_model.compile(</span><br><span class="line">    loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">    optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练500个epochs </span></span><br><span class="line">emoji_history = emoji_model.fit(</span><br><span class="line">    train_x, </span><br><span class="line">    train_y_oh, </span><br><span class="line">    epochs=<span class="number">500</span>, </span><br><span class="line">    shuffle=<span class="literal">True</span>, </span><br><span class="line">    validation_data=(test_x, test_y_oh), )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制损失曲线</span></span><br><span class="line">utils.plot_history(emoji_history, [<span class="string">&#x27;loss&#x27;</span>, <span class="string">&#x27;val_loss&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p><img src="/2020/nlp-week3/img10.jpg" alt="img10"></p>
<p>可以看出300个epochs以后辅助训练的损失就不再降低了。最后开始测试一些自己写的句子，首先定义一个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pred_emoji</span>(<span class="params">text</span>):</span></span><br><span class="line">    embedding = np.array([utils.sentence_to_avg(text, word_to_vec_map)]) <span class="comment"># get embedding</span></span><br><span class="line">    pred = emoji_model.predict([embedding]) <span class="comment"># predict, return the probability of each class</span></span><br><span class="line">    label = np.argmax(pred) <span class="comment"># choose the one with largest probability as label</span></span><br><span class="line">    <span class="keyword">return</span> utils.label_to_emoji(label)</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>随便写五个句子开始预测：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tests = [</span><br><span class="line">    <span class="string">&quot;i love you&quot;</span>, </span><br><span class="line">    <span class="string">&quot;it&#x27;s so disgusting!&quot;</span>, </span><br><span class="line">    <span class="string">&quot;funny lol&quot;</span>, </span><br><span class="line">    <span class="string">&quot;lets play tennis&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Do you want to have a dinner with me?&quot;</span>, </span><br><span class="line">    <span class="string">&quot;I am not feeling great&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> tests:</span><br><span class="line">    print(test,pred_emoji(test))</span><br></pre></td></tr></table></figure>

<p>在结果中可以看出，普通的句子基本上可以正确预测，但是最后一个句子中否定词的出现让判断失败，所以这样的模型其实还是丢失了单词在句子中的顺序信息，因为否定词后面的情感应该要全部反转。之后可以用RNN模型来解决这个问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i love you ❤️</span><br><span class="line">it&#39;s so disgusting! 😞</span><br><span class="line">funny lol 😄</span><br><span class="line">lets play tennis ⚾</span><br><span class="line">Do you want to have a dinner with me? 🍴</span><br><span class="line">I am not feeling great 😄</span><br></pre></td></tr></table></figure>

<p>值得一提的是，虽然训练数据非常小，但依然有比较高的准确率。这是因为虽然很多词在训练数据中没有，比如lol，但是在加载的Embedding中，funny和lol的位置其实非常接近。所以即使没有出现过的词，只要Embedding足够精准也是可以成功预测的，例如第三句就相当于。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>强哥的C语言-追求极致时空效益</title>
    <url>/2019/qiang-c/</url>
    <content><![CDATA[<p>进大学蛮久了，C语言的课也上了大半。不过和我想象中差距最大的，竟然是教C的老师-强哥。副院长也不是盖的。虽然并不是很喜欢他的守旧习惯和近乎强迫症般的各种要求，但他想让学生追求的方向是正确的。从他的每一节课，都能听到他对程序运行的效率非常敏感，不断地强调要用最少的空间，在最短的时间内跑完程序。这一篇就来记录一下他的各种骚操作。</p>
<a id="more"></a>

<h1 id="双向冒泡排序"><a href="#双向冒泡排序" class="headerlink" title="双向冒泡排序"></a>双向冒泡排序</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">6</span>] = &#123; <span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span> - j; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = a[i];</span><br><span class="line">                a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                a[i + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">5</span>; i &gt;<span class="number">0</span> ; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = a[i];</span><br><span class="line">                a[i] = a[i - <span class="number">1</span>];</span><br><span class="line">                a[i - <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id><a href="#" class="headerlink" title></a></h6><h1 id="两个数组合并冒泡排序"><a href="#两个数组合并冒泡排序" class="headerlink" title="两个数组合并冒泡排序"></a>两个数组合并冒泡排序</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAnB</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> asize, <span class="keyword">int</span>* b, <span class="keyword">int</span> bsize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp, i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; asize + bsize<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; asize + bsize<span class="number">-1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; asize<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = a[j];</span><br><span class="line">                    a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                    a[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == asize<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt; b[<span class="number">0</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = a[j];</span><br><span class="line">                    a[j] = b[<span class="number">0</span>];</span><br><span class="line">                    b[<span class="number">0</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (b[j-asize] &gt; b[j -asize + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = b[j - asize];</span><br><span class="line">                    b[j - asize] = b[j - asize + <span class="number">1</span>];</span><br><span class="line">                    b[j - asize + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Array a:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; asize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, *(a + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nArray b:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bsize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, *(b + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="-1"><a href="#-1" class="headerlink" title></a></h6><h1 id="链表冒泡排序"><a href="#链表冒泡排序" class="headerlink" title="链表冒泡排序"></a>链表冒泡排序</h1><ul>
<li>只能使用一个二重循环实现用冒泡排序的过程</li>
<li>排序过程中，每个节点的数据不发生变化</li>
<li>排序过程中，只允许按需进行动态内存分配，不容许有冗余空间进行额外存储处理</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct Node)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct Node* <span class="title">SortLList</span><span class="params">(struct Node* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">p0</span> = (<span class="title">struct</span> <span class="title">Node</span>*)<span class="title">malloc</span>(<span class="title">LEN</span>);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head2</span> = <span class="title">p0</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">p1</span> = <span class="title">head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">p2</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    p0-&gt;next = head;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j =<span class="number">0</span>; j &lt; n - <span class="number">1</span>- i; j++) </span><br><span class="line">    &#123; </span><br><span class="line">        p1 = p0-&gt;next;</span><br><span class="line">        p2 = p1-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p1-&gt;x &lt; p2-&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">          p1-&gt;next = p2-&gt;next;</span><br><span class="line">          p2-&gt;next = p1;</span><br><span class="line">          p0-&gt;next = p2;</span><br><span class="line">        &#125;</span><br><span class="line">        p0 = p0-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p0 = head2;</span><br><span class="line">    &#125;</span><br><span class="line">    head2 = head2-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> head2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="-2"><a href="#-2" class="headerlink" title></a></h6><h1 id="只用一个指针创建链表"><a href="#只用一个指针创建链表" class="headerlink" title="只用一个指针创建链表"></a>只用一个指针创建链表</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> num;</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">struct student* <span class="title">create</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">head</span>=<span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">p1</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    p1 = (struct student*) <span class="built_in">malloc</span>(LEN);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> num=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">    scanf_s(<span class="string">&quot;%ld,%f&quot;</span>, &amp;num, &amp;score);</span><br><span class="line">    <span class="keyword">while</span>(num)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">            n++;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">                head = p1;    </span><br><span class="line">            p1-&gt;num = num, p1-&gt;score = score;</span><br><span class="line">            scanf_s(<span class="string">&quot;%ld,%f&quot;</span>, &amp;num, &amp;score);</span><br><span class="line">            <span class="keyword">if</span>(num)</span><br><span class="line">            &#123;</span><br><span class="line">            p1-&gt;next = (struct student*)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="-3"><a href="#-3" class="headerlink" title></a></h6><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经典的就是这几个，其他的太零碎就不放了。当时敲的时候是确实烦躁，难以忍受这样奇葩的要求。但是做出来了回头再看，这样的算法确实足够精简，不浪费任何不必要的内存，同时尽可能提高执行速度。虽然现在这样的小练手不会有太大作用，但可想而知当程序体量不断增长，设计算法时考虑到时空效益就尤为重要了。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>重启博客</title>
    <url>/2020/restart/</url>
    <content><![CDATA[<p>刚好Java学的差不多了，有点闲情就重新恢复了我的博客，可能是因为github的<del>密码突然想起来</del>了。看了几个大佬的Profile，接下来也想把绿块填满了。</p>
<p>正好发现Hexo这个神奇的博客程序，完全静态生成页面，优雅简洁，新云流水。就决定把原来的垃圾Wordpress博客搬过来了。同时hexo是完全托管在github pages上的，十分方便，<del>还能凑点contributions</del>。</p>
<p>Macos部署环境还是非常顺手的，nodejs，hexo直接敲终端就装好了。又随便找了个NexT的主题，可能是这个深色模式太帅了哈哈哈。随便修改了一下，暂时先这样吧，看上去还是很nice的。</p>
<a id="more"></a>

<p>之前的blog里又是照片又是随笔又是代码，还是太乱了。今后这个blog专门放随笔和笔记，以前的文章会慢慢搬过来。正好买了个域名，直接绑定到github上，还能自动加https，爽啊。但是国内总是访问不了github.io，进去了也慢得很。算了，先这样吧。</p>
<p>接下来一个月到开学要一直学TOFEL，感觉没什么时间打码了。也罢，去了学校比家里还闲，不急不急。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentiment Analysis Part4</title>
    <url>/2020/nlp-week4/</url>
    <content><![CDATA[<p>这是NLP课程的最后一天，本周会学习RNN（循环神经网络），相比一般的神经网络来说，他能够处理序列变化的数据。比如某个单词的意思会因为上文提到的内容不同而有不同的含义，RNN就能够很好地解决这类问题。这部分尝试解决上一节中否定词带来的判断错误，同时补充LSTM相关的内容。</p>
<p><img src="/2020/nlp-week4/img0.jpg" alt="img0"></p>
<a id="more"></a>

<h1 id="RNN的种类"><a href="#RNN的种类" class="headerlink" title="RNN的种类"></a>RNN的种类</h1><p>RNN有很多不同的形式，但都是由多个普通神经网络串联起来的。比如N:N, N:1, 1:N, 1:1等等，下面是不同RNN的结构和应用场景。<img src="/2020/nlp-week4/img1.jpg" alt="img1"></p>
<p>可以发现，Sentiment Analysis就可以采用N:1这样的RNN，每个X就是一个词，最终只有一个输出。</p>
<h1 id="RNN单元结构"><a href="#RNN单元结构" class="headerlink" title="RNN单元结构"></a>RNN单元结构</h1><p><img src="/2020/nlp-week4/img2.jpg" alt="img2"></p>
<h2 id="长期依赖（Long-Term-Dependencies）问题"><a href="#长期依赖（Long-Term-Dependencies）问题" class="headerlink" title="长期依赖（Long-Term Dependencies）问题"></a>长期依赖（Long-Term Dependencies）问题</h2><p>RNN 的关键点之一就是他们可以用来连接先前的信息到当前的任务上。例如，有一个语言模型基于先前的词来预测下一个词。如果我们试着预测 “the clouds are in the sky” 最后的词，我们并不需要任何其他的上下文 —— 因此下一个词很显然就应该是 sky。在这样的场景中，相关的信息和预测的词位置之间的间隔是非常小的，RNN 可以学会使用先前的信息。但如果是很长的信息（超过20词），在多次矩阵相乘运算以后，很多数据都接近于0 了。就相当于一段话前半部分没有起作用，只有最后20个词对预测有影响。为了解决这个问题，可以使用LSTM。</p>
<h1 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h1><p>长短期记忆（Long short-term memory, LSTM）是一种特殊的RNN，主要是为了解决长序列训练过程中的梯度消失和梯度爆炸问题。简单来说，就是相比普通的RNN，LSTM能够在更长的序列中有更好的表现。所有的RNN都具有一种重复神经网络模块的链式形式，在标准RNN中，这个重复的结构模块只有一个非常简单的结构，例如一个tanh层。</p>
<p>LSTM 同样是这样的重复模块，但这些模块拥有不同于普通RNN的结构。和普通RNN的单一神经网络层相比，LSTM有四个，以一种非常特殊的方式进行交互。</p>
<p><img src="/2020/nlp-week4/img3.jpg" alt="img3"></p>
<p>相比RNN只有一个传递状态<code>a^t</code>，LSTM有两个传输状态，一个<code>c^t</code>（cell state），和一个<code>a^t</code>（hidden state）。其中对于传递下去的<code>c^t</code>改变得很慢，通常输出的<code>c^t</code>是上一个状态传过来的 <code>c^&lt;t-1&gt;</code>加上一些数值，而 <code>a^t</code> 则在不同节点下往往会有很大的区别。</p>
<p><img src="/2020/nlp-week4/img4.jpg" alt="img4"></p>
<h2 id="遗忘门（forget-gate）"><a href="#遗忘门（forget-gate）" class="headerlink" title="遗忘门（forget gate）"></a>遗忘门（forget gate）</h2><p>LSTM的第一步是决定我们会从细胞状态中丢弃什么信息。这个决定通过一个称为忘记门层完成。该门会读取<code>a^&lt;t-1&gt;</code>和<code>X^t</code>，输出一个在 0到 1之间的数值给每个在细胞状态<code>c^&lt;t-1&gt;</code>中的数字。1 表示“完全保留”，0 表示“完全舍弃”。</p>
<p>其中<code>a^&lt;t-1&gt;</code>表示的是上一个cell的输出，<code>X^t</code>表示的是当前细胞的输入。<code>σ</code>表示sigmod函数。</p>
<h2 id="输入门（update-gate）"><a href="#输入门（update-gate）" class="headerlink" title="输入门（update gate）"></a>输入门（update gate）</h2><p>下一步是决定让多少新的信息加入到 cell 状态 中来。实现这个需要包括两个 步骤：首先，一个叫做<code>update gate</code>的 sigmoid 层决定哪些信息需要更新，一个 <code>tanh </code>层生成一个向量，也就是备选的用来更新的内容，<code>c^t </code>。接下来更新旧细胞状态，把旧状态与<code>f</code>相乘，丢弃掉我们确定需要丢弃的信息。接着加上<code>u*c~t</code>，这就是新的候选值，根据我们决定更新每个状态的程度进行变化。</p>
<h2 id="输出门（output-gate）"><a href="#输出门（output-gate）" class="headerlink" title="输出门（output gate）"></a>输出门（output gate）</h2><p>最终，我们需要确定输出什么值。这个输出将会基于我们的细胞状态，但是也是一个过滤后的版本。首先，运行一个 sigmoid 层来确定细胞状态的哪个部分将输出出去。接着，把细胞状态通过 tanh 进行处理（得到一个在 -1 到 1 之间的值）并将它和 sigmoid 门的输出相乘，最终我们仅仅会输出我们确定输出的那部分。</p>
<h1 id="构建LSTM"><a href="#构建LSTM" class="headerlink" title="构建LSTM"></a>构建LSTM</h1><p>这次依然用上一节的实例，输入句子预测Emoji。先导入所需的包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> nlp_proj_utils <span class="keyword">as</span> utils</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model  </span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Input, Dropout, LSTM, Activation, Embedding</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">%config InlineBackend.figure_format=<span class="string">&#x27;retina&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">train_x, test_x, train_y, test_y = utils.load_emoji()</span><br></pre></td></tr></table></figure>



<h2 id="Word-Embeddings-amp-One-Hot"><a href="#Word-Embeddings-amp-One-Hot" class="headerlink" title="Word Embeddings &amp; One Hot"></a>Word Embeddings &amp; One Hot</h2><p>在上一节中，对于每一个训练语句，我们直接用python分割了每个单词然后把每个词的Embedding向量求平均以算出每个句子的向量。但这样做就会导致单词顺序信息丢失，并且计算效率很低。所以这次用tensorflow来进行快速计算，在Keras中，我们必须要以矩阵的形式传入embedding layer，每一行依次是单词表中的每一个词，长度为向量的维度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word_to_index, word_to_vec_map = utils.load_glove_vecs()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert word to the index in vocabulary</span></span><br><span class="line">utils.sentences_to_indices(</span><br><span class="line">    np.array([<span class="string">&quot;i like it&quot;</span>, <span class="string">&quot;i hate it&quot;</span>]),  <span class="comment"># array of test sentences</span></span><br><span class="line">    word_to_index, </span><br><span class="line">    max_len = <span class="number">5</span>)</span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># array([[185457., 222471., 193716.,      0.,      0.],[185457., 174339., 193716.,      0.,      0.]])</span></span><br></pre></td></tr></table></figure>

<p>这里规定句子最大长度为5，可以看到每个句子都被转化成了包含对于词index的数组。</p>
<p>接下来找到所有句子中长度最大的一个，然后分别转化训练和测试数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maxlen = max([len(x.split()) <span class="keyword">for</span> x <span class="keyword">in</span> train_x])</span><br><span class="line">print(<span class="string">&#x27;max number of words in a sentence:&#x27;</span>, maxlen)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out</span></span><br><span class="line"><span class="comment"># max number of words in a sentence: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert training/testing features into index list</span></span><br><span class="line">train_x = utils.sentences_to_indices(train_x, word_to_index, maxlen)</span><br><span class="line">test_x = utils.sentences_to_indices(test_x, word_to_index, maxlen)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert training/testing labels into one hot array</span></span><br><span class="line">train_y = utils.convert_to_one_hot(train_y, C = <span class="number">5</span>)</span><br><span class="line">test_y = utils.convert_to_one_hot(test_y, C = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check to make sure the shape looks good</span></span><br><span class="line"><span class="keyword">assert</span> train_x.shape == (<span class="number">132</span>, maxlen)</span><br><span class="line"><span class="keyword">assert</span> train_y.shape == (<span class="number">132</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>最后得到的训练数据只有132条，最大长度10。</p>
<h2 id="Embedding-Layer"><a href="#Embedding-Layer" class="headerlink" title="Embedding Layer"></a>Embedding Layer</h2><p>现在定义一个函数，用于构建上面说到的Embedding矩阵。首先把每一行都初始化为0，每读取一个单词，就在其index对应的行填充<code>glove</code>中的向量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretrained_embedding_layer</span>(<span class="params">word_to_index, word_to_vec_map</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Build and return a Keras Embedding Layer given word_to_vec mapping and word_to_index mapping</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        word_to_index (dict[str-&gt;int]): map from a word to its index in vocabulary</span></span><br><span class="line"><span class="string">        word_to_vec_map (dict[str-&gt;np.ndarray]): map from a word to a vector with shape (N,) where N is the length of a word vector (50 in our case)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">        Keras.layers.Embedding: Embedding layer</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Keras requires vocab length start from index 1，第一行留空</span></span><br><span class="line">    vocab_len = len(word_to_index) + <span class="number">1</span>  </span><br><span class="line">    emb_dim = list(word_to_vec_map.values())[<span class="number">0</span>].shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize the embedding matrix as a numpy array of zeros of shape (vocab_len, dimensions of word vectors = emb_dim)</span></span><br><span class="line">    emb_matrix = np.zeros((vocab_len, emb_dim))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set each row &quot;index&quot; of the embedding matrix to be the word vector representation of the &quot;index&quot;th word of the vocabulary</span></span><br><span class="line">    <span class="keyword">for</span> word, index <span class="keyword">in</span> word_to_index.items():</span><br><span class="line">        emb_matrix[index, :] = word_to_vec_map[word]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define Keras embedding layer with the correct output/input sizes, make it trainable. Use Embedding(...). Make sure to set trainable=False. </span></span><br><span class="line">    <span class="keyword">return</span> Embedding(</span><br><span class="line">        input_dim=vocab_len,  <span class="comment"># 单词表的长度</span></span><br><span class="line">        output_dim=emb_dim,  <span class="comment">#每个单词向量的长度</span></span><br><span class="line">        trainable=<span class="literal">False</span>,  <span class="comment"># Embedding是否随着训练一起变化。若选true，速度会很慢</span></span><br><span class="line">        weights=[emb_matrix])</span><br></pre></td></tr></table></figure>

<h2 id="Build-the-Model"><a href="#Build-the-Model" class="headerlink" title="Build the Model"></a>Build the Model</h2><p><img src="/2020/nlp-week4/img5.jpg" alt="img5"></p>
<p>这次建立的模型包含了两层LSTM顺序分类器，即Deep RNN（一般不超过三层）。现在定义一个函数构造模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_emoji_model</span>(<span class="params">input_dim, word_to_index, word_to_vec_map</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Build and return the Keras model</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_dim: The dim of input layer</span></span><br><span class="line"><span class="string">        word_to_vec_map (dict[str-&gt;np.ndarray]): map from a word to a vector with shape (N,) where N is the length of a word vector (50 in our case)</span></span><br><span class="line"><span class="string">        word_to_index (dict[str-&gt;int]): map from a word to its index in vocabulary</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Keras.models.Model: 2-layer LSTM model</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Input layer，得到每一个句子对应的index向量</span></span><br><span class="line">    sentence_indices = Input(shape=(input_dim,), dtype=<span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造每个词的 Embedding layer，得到所有的e</span></span><br><span class="line">    embedding_layer = pretrained_embedding_layer(word_to_index, word_to_vec_map)</span><br><span class="line">    embeddings = embedding_layer(sentence_indices)   </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 建立两层的LSTM，dropout用于防治过拟合。</span></span><br><span class="line">    X = LSTM(<span class="number">128</span>, return_sequences=<span class="literal">True</span>, recurrent_dropout=<span class="number">0.5</span>)(embeddings)  <span class="comment"># N-&gt;N RNN，得到所有的a</span></span><br><span class="line">    X = Dropout(rate=<span class="number">0.8</span>)(X)</span><br><span class="line">    X = LSTM(<span class="number">128</span>, recurrent_dropout=<span class="number">0.5</span>)(X)  <span class="comment"># N -&gt; 1 RNN</span></span><br><span class="line">    X = Dropout(rate=<span class="number">0.8</span>)(X)</span><br><span class="line">    X = Dense(<span class="number">5</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)(X)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create and return model</span></span><br><span class="line">    model = Model(inputs=sentence_indices, outputs=X)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>

<p>然后查看emoji模型的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">emoji_model &#x3D; build_emoji_model(</span><br><span class="line">    maxlen, </span><br><span class="line">    word_to_index, </span><br><span class="line">    word_to_vec_map)</span><br><span class="line"></span><br><span class="line">emoji_model.summary()</span><br><span class="line"></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">input_1 (InputLayer)         [(None, 10)]              0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">embedding (Embedding)        (None, 10, 50)            20000050  </span><br><span class="line">_________________________________________________________________</span><br><span class="line">lstm (LSTM)                  (None, 10, 128)           91648     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout (Dropout)            (None, 10, 128)           0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">lstm_1 (LSTM)                (None, 128)               131584    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout_1 (Dropout)          (None, 128)               0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                (None, 5)                 645       </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 20,223,927</span><br><span class="line">Trainable params: 223,877</span><br><span class="line">Non-trainable params: 20,000,050</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>

<p>可以看到Embedding参数有20000000个，若训练需要非常长的时间。但这里不训练embedding，所有总共只需要训练223887个参数即可。接下来开始训练100个epochs并统计损失曲线和准确率：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emoji_model.compile(</span><br><span class="line">    loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, </span><br><span class="line">    optimizer=<span class="string">&#x27;adam&#x27;</span>, </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">history = emoji_model.fit(</span><br><span class="line">    train_x, </span><br><span class="line">    train_y, </span><br><span class="line">    epochs = <span class="number">100</span>,  </span><br><span class="line">    shuffle=<span class="literal">True</span>,</span><br><span class="line">    validation_data=[test_x, test_y]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">utils.plot_history(history, [<span class="string">&#x27;loss&#x27;</span>, <span class="string">&#x27;val_loss&#x27;</span>])</span><br><span class="line"></span><br><span class="line">utils.plot_history(history, [<span class="string">&#x27;acc&#x27;</span>, <span class="string">&#x27;val_acc&#x27;</span>])</span><br><span class="line"></span><br><span class="line">emoji_model.evaluate(train_x, train_y)</span><br><span class="line">emoji_model.evaluate(test_x, test_y)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/nlp-week4/img6.jpg" alt="img6"></p>
<p>可以看到最终的准确率在91%左右。</p>
<h1 id="Save-and-Load-Models"><a href="#Save-and-Load-Models" class="headerlink" title="Save and Load Models"></a>Save and Load Models</h1><p>需要存储两部分数据：</p>
<ol>
<li>Neural Network Structure</li>
<li>Trained Weights (Matrix)</li>
</ol>
<p>一般需要分开存储。这样可以方便管理和选择不同版本的weights用于实际项目。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import</span></span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">model_root = <span class="string">&#x27;resources/emoji_model&#x27;</span></span><br><span class="line">os.makedirs(model_root, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save model structure as json</span></span><br><span class="line"><span class="keyword">with</span> open(os.path.join(model_root, <span class="string">&quot;network.json&quot;</span>), <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(emoji_model.to_json())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save model weights</span></span><br><span class="line">emoji_model.save_weights(os.path.join(model_root, <span class="string">&quot;weights.h5&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>存储完本地训练的模型后，再下载一个已经训练好的最高准确率模型来测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">network_path, weights_path = utils.download_best_emoji_model()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> model_from_json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load model structure</span></span><br><span class="line"><span class="keyword">with</span> open(network_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    emoji_model_best = model_from_json(fp.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load model weights</span></span><br><span class="line">emoji_model_best.load_weights(weights_path)</span><br><span class="line"></span><br><span class="line">emoji_model_best.compile(</span><br><span class="line">    loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>, </span><br><span class="line">    optimizer=<span class="string">&#x27;adam&#x27;</span>, </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">emoji_model_best.evaluate(train_x, train_y)</span><br><span class="line">emoji_model_best.evaluate(test_x, test_y)</span><br></pre></td></tr></table></figure>

<p>可以发现这个模型准确率在92%左右：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0.2815101998192923, 0.9285714]</span><br></pre></td></tr></table></figure>

<p>最后来预测一下上次判断错误的带否定词的句子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predict(<span class="string">&#x27;i am not feeling great&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Out: i am not feeling great 😞</span></span><br></pre></td></tr></table></figure>

<p>可以看到使用LSTM以后，带否定词的句子也可以成功判断了。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentiment Analysis on Film Review</title>
    <url>/2020/nlp-project/</url>
    <content><![CDATA[<p>这周开始做NLP的项目，目标是训练一个模型来预测影评是正面的还是负面的。先在<code>Jupyter Notebook</code>里训练和处理，模型做好以后计划用<code>Flask</code>包装成一个web应用以便交互。</p>
<p>首先尝试使用Embedding和LSTM构建模型，发现这个影评数据长度非常大，全部训练一次就要一个小时。所以暂时先截取前一部分词。但是发现想到达到90%以上的准确率还是比较难的。在长度50的时候用单层LSTM训练100个epochs最终准确率只有80%。可以发现在20个epochs以后就已经过拟合了。</p>
<a id="more"></a>

<p><img src="/2020/nlp-project/img-1.png" alt="img_20200923184339"></p>
<h1 id="Improve-the-accuracy"><a href="#Improve-the-accuracy" class="headerlink" title="Improve the accuracy"></a>Improve the accuracy</h1><p>随后改成双层LSTM，30epochs，准确率达到82%</p>
<p><img src="/2020/nlp-project/img-2.png" alt="img_20200923203036"></p>
<p>尝试增加长度到70词，准确率达到83.3%</p>
<p><img src="/2020/nlp-project/img-3.png" alt="img_20200923210335"></p>
<p>想了想不如直接提高到150词。但是实在是太费时间了，不想再用macbook跑了，一跑模型这风扇就开始唱歌，cpu占满啥也干不了。所以翻出了之前配的台式机（居然还能用上），在windows上重新配了环境。晾着慢慢跑了一晚上，噪音电费都还算能接受。但是最后跑出来81%，还掉了……</p>
<p><img src="/2020/nlp-project/img-4.png" alt="img_20200923222952"></p>
<p>反正放着也没关系，干别的事去，直接上到200词，这回到了84.7%</p>
<p><img src="/2020/nlp-project/img-5.jpg" alt="img_1678202009241630"></p>
<h1 id="重新处理输入数据"><a href="#重新处理输入数据" class="headerlink" title="重新处理输入数据"></a>重新处理输入数据</h1><p>再往后试300长度的时候发现直接过不了50%了，只能开始从别的办法提高。想到之前只保留出现频率最高的3000词，就想着试试看。先算50个词，20个epchos：</p>
<p><img src="/2020/nlp-project/img-6.jpg" alt="img2-09240728"></p>
<p>感觉不出啥差别，再试试长度150词，100个epochs：</p>
<p><img src="/2020/nlp-project/img-7.png" alt="img_20545040054"></p>
<p>长度200词，100epochs</p>
<p><img src="/2020/nlp-project/img-8.png" alt="img_2054654844"></p>
<p>发现可以达到86%了，又提高了一丁丁点。</p>
<h1 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h1><p><img src="/2020/nlp-project/img-9.jpg" alt="img-9"></p>
<p>又试了两天，发现用LSTM不训练Embedding的话，基本上准确率很难超过87%，所以就不继续为难可怜的主机了。用h5py保存下来现有的准确率最高的模型，接下来试着用Flask把这个项目部署为一个Web Application。如果你想查看代码，你可以访问这个Github项目：<a href="https://github.com/wilsongibbs/review-nlp">https://github.com/wilsongibbs/review-nlp</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数学建模-预测海平面上升对城市的影响</title>
    <url>/2020/mcm-sz/</url>
    <content><![CDATA[<p><img src="/2020/mcm-sz/map.jpg" alt="map"></p>
<a id="more"></a>

<ul>
<li><em>深圳市地形与地理信息图 [7]</em></li>
</ul>
<p>随着全球气温的不断升高，海平面上升已经是一个十分现实的环境问题，这将使沿海地区和城市面临危险。虽然短期内可能对人类影响不大，但若将时间范围扩大到未来50-100年，这样的影响就不容忽视了。在这篇文章中，我将使用Python建模的方式，利用网络上下载的DEM高程数据，来建立中国广东省深圳市的地形模型。选择这个城市的原因是：人口与建筑非常密集，环境对经济影响显著，同时也是一个典型的低海拔沿海城市。建立模型后，既可绘制现在的地形图，和预测50-100年内的地形变化，并评估海平面上升带来的影响。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>考虑由于预计全球温度上升而导致的北极冰盖的融化对陆地的影响。尤其考虑由 于北极冰盖融化对我国的影响，可以侧重于大城市及周边城市群。并且尝试提出应对 措施来处理这个问题。</p>
<p>在本文中，将预测海平面上升后广东省深圳市土地淹没情况。深圳市位于珠江三角洲东侧沿海。凭借特有的区位优势，大量招商引资，社会经济各项事业飞速发展。截至 2019 年 ，深圳市人口达 1343.88 万 ，GDP 达到 26927.09 亿元，人均 GDP 高达 29964 美元。</p>
<h1 id="海平面上升预测"><a href="#海平面上升预测" class="headerlink" title="海平面上升预测"></a>海平面上升预测</h1><p>IPCC 第四次气候评估报告预测:至 2100 年全球海平面可能较 1980<del>1999 年的 平均面上升 0.9</del>0.88m，最佳估计上升 0.48m [1]。在区域尺度，时小军[2] 等研究指 出，考虑地面沉降以及波动值因素，至 2030 年和 2050 年，深圳市相对海平面相对 1980~1999 年平均海平面上升可能分别达到 0.3m 和 0.5m。在趋势分析中，假定这 种变化趋势稳定，则按照线性回归方法进行预测 ，可知至 2100 年本地区相对海平面 上升幅度可达 1m [3]。因此，对深圳市地形数据建模，分别评估海平面上升 0m， 0.5m，1m 时，对城市地表的影响。</p>
<h1 id="土地淹没分析"><a href="#土地淹没分析" class="headerlink" title="土地淹没分析"></a>土地淹没分析</h1><h2 id="建模方法"><a href="#建模方法" class="headerlink" title="建模方法"></a>建模方法</h2><p>本文模型使用<code>Python</code>和<code>Jupyter Notebook</code>运行。需要导入地理数据格式操作库<code>gdal</code>读取地形数据，<code>numpy</code>存储并处理高程信息，<code>matplotlib</code>绘制地形图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cbook</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LightSource</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> osgeo <span class="keyword">import</span> gdal_array</span><br></pre></td></tr></table></figure>

<p>首先获取NASA的DEM高程数据，精度为34m左右。然后按照深圳市行政区划分割出对于范围，通过地理数据格式操作库<code>gdal</code>将栅格数据转化为<code>np.array</code>数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取dem文件</span></span><br><span class="line">path = <span class="string">&quot;DEM/sz-30m.tif&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将dem文件转为np.array数组</span></span><br><span class="line">lmsdem = gdal_array.LoadFile(path)</span><br><span class="line">nrows, ncols = lmsdem.shape</span><br></pre></td></tr></table></figure>

<p>然后对地形数据进行处理，将无效值和海拔低于0的值全部设为0。并且根据需求设置海平面上升高度，可以选择绘制水上地区或者淹没地区：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置海平面上升高度</span></span><br><span class="line">rise = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制水上地区</span></span><br><span class="line">lmsdem = lmsdem-rise</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将海拔低于0的点置0</span></span><br><span class="line">lmsdem[np.isnan(lmsdem)] = <span class="number">0</span></span><br><span class="line">lmsdem[lmsdem&lt;<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制淹没地区</span></span><br><span class="line"><span class="comment"># lmsdem[lmsdem==0] = rise</span></span><br><span class="line"><span class="comment"># lmsdem = lmsdem-rise</span></span><br><span class="line"><span class="comment"># lmsdem = lmsdem*-1</span></span><br><span class="line"><span class="comment"># lmsdem[lmsdem&lt;0] = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴坐标</span></span><br><span class="line">x_array = np.zeros((nrows,ncols))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xaxis</span>(<span class="params">a,b</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(a,b):</span><br><span class="line">      x_array[i,:] = i</span><br><span class="line">  <span class="keyword">return</span> x_array</span><br><span class="line">x = xaxis(<span class="number">0</span>,nrows)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置y轴坐标</span></span><br><span class="line">y_array = np.zeros((nrows,ncols))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yaxis</span>(<span class="params">a,b</span>):</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(a,b):</span><br><span class="line">      y_array[:,i] = i</span><br><span class="line">  <span class="keyword">return</span> y_array</span><br><span class="line">y = yaxis(<span class="number">0</span>,ncols)</span><br></pre></td></tr></table></figure>

<p>通过<code>colormap</code>自定义渲染颜色：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置渲染颜色</span></span><br><span class="line">cdict = &#123;<span class="string">&#x27;red&#x27;</span>:   ((<span class="number">0.0</span>,  <span class="number">0.98</span>, <span class="number">0.98</span>),</span><br><span class="line">                   (<span class="number">0.1</span>,  <span class="number">0.93</span>, <span class="number">0.93</span>),</span><br><span class="line">                   (<span class="number">0.2</span>,  <span class="number">0.87</span>, <span class="number">0.87</span>),</span><br><span class="line">                   (<span class="number">0.4</span>,  <span class="number">0.72</span>, <span class="number">0.72</span>),</span><br><span class="line">                   (<span class="number">0.6</span>,  <span class="number">0.57</span>, <span class="number">0.57</span>),</span><br><span class="line">                   (<span class="number">0.8</span>,  <span class="number">0.40</span>, <span class="number">0.40</span>),</span><br><span class="line">                   (<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>)),</span><br><span class="line"></span><br><span class="line">         <span class="string">&#x27;green&#x27;</span>: ((<span class="number">0.0</span>,  <span class="number">0.91</span>, <span class="number">0.91</span>),</span><br><span class="line">                   (<span class="number">0.1</span>,  <span class="number">0.69</span>, <span class="number">0.69</span>),</span><br><span class="line">                   (<span class="number">0.2</span>,  <span class="number">0.45</span>, <span class="number">0.45</span>),</span><br><span class="line">                   (<span class="number">0.4</span>,  <span class="number">0.11</span>, <span class="number">0.11</span>),</span><br><span class="line">                   (<span class="number">0.6</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">                   (<span class="number">0.8</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">                   (<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>)),</span><br><span class="line"></span><br><span class="line">         <span class="string">&#x27;blue&#x27;</span>:  ((<span class="number">0.0</span>,  <span class="number">0.59</span>, <span class="number">0.59</span>),</span><br><span class="line">                   (<span class="number">0.1</span>,  <span class="number">0.13</span>, <span class="number">0.13</span>),</span><br><span class="line">                   (<span class="number">0.2</span>,  <span class="number">0.20</span>, <span class="number">0.20</span>),</span><br><span class="line">                   (<span class="number">0.4</span>,  <span class="number">0.57</span>, <span class="number">0.57</span>),</span><br><span class="line">                   (<span class="number">0.6</span>,  <span class="number">0.98</span>, <span class="number">0.98</span>),</span><br><span class="line">                   (<span class="number">0.8</span>,  <span class="number">0.78</span>, <span class="number">0.78</span>),</span><br><span class="line">                   (<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>)),</span><br><span class="line">         <span class="string">&#x27;alpha&#x27;</span>: ((<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>),</span><br><span class="line">                    (<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>),</span><br><span class="line">                    (<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)),&#125;</span><br><span class="line">                    </span><br><span class="line">plt.register_cmap(cmap=LinearSegmentedColormap(<span class="string">&#x27;color&#x27;</span>, cdict))</span><br><span class="line">cmap = plt.get_cmap(<span class="string">&#x27;color&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用<code>matplotlib</code>绘制3D地图:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置绘制区域的范围</span></span><br><span class="line">region = np.s_[<span class="number">0</span>:<span class="number">350</span>,<span class="number">0</span>:<span class="number">700</span>]</span><br><span class="line">x,y,z = x[region],y[region],lmsdem[region]</span><br><span class="line">fig, ax = plt.subplots(subplot_kw = dict(projection=<span class="string">&#x27;3d&#x27;</span>),figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置视角</span></span><br><span class="line">ax.view_init(elev=<span class="number">60</span>, azim=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">400000</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">700000</span>)</span><br><span class="line">ax.set_zlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">ax.grid(<span class="literal">False</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 染色</span></span><br><span class="line">ls = LightSource(<span class="number">270</span>, <span class="number">45</span>)</span><br><span class="line">rgb = ls.shade(z, cmap=cmap, vert_exag=<span class="number">0.1</span>, blend_mode=<span class="string">&#x27;soft&#x27;</span>)</span><br><span class="line">surf = ax.plot_surface(x*<span class="number">1000</span>, y*<span class="number">1000</span>, z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=cmap, </span><br><span class="line">                       linewidth=<span class="number">0</span>, antialiased=<span class="literal">True</span>, shade=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 添加图例</span></span><br><span class="line">fig.colorbar(surf, shrink=<span class="number">0.5</span>, aspect=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为pdf格式</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;image.pdf&#x27;</span>, format=<span class="string">&#x27;pdf&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, transparent=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>分别绘制现在和未来 50~100 年的土地淹没情况。通过自定义的 ColorMap，不同位 置的海拔高度可以用不同颜色表示，具体见地形图右侧图例。</p>
<h3 id="深圳市地形—现今"><a href="#深圳市地形—现今" class="headerlink" title="深圳市地形—现今"></a>深圳市地形—现今</h3><p><img src="/2020/mcm-sz/sz.jpg" alt="sz"></p>
<p>比较 3D 地形图和 Google 地图可以发现，深圳市山地地貌主要分布于梧桐山(海 拔 943.7m)，凤凰山(678m)，塘朗山和南山。剩余地区大部分为低海拔平原，且 人口、产业密集。</p>
<h3 id="2050-年地形预测—海平面上升-0-5m"><a href="#2050-年地形预测—海平面上升-0-5m" class="headerlink" title="2050 年地形预测—海平面上升 0.5m"></a><strong>2050</strong> 年地形预测—海平面上升 0.5m</h3><p>根据上文所述预测，可以假设 2050 年深圳市海平面上升约 0.5 米。对高程数据进 行处理后可以分别得到海平面上升后水上土地情况和土地被淹没情况。其中被淹没情 况表示被淹没地面距离海平面距离，越高表示被淹没的越深。</p>
<p><img src="/2020/mcm-sz/sz-0.5m.jpg" alt="sz-0.5m"></p>
<ul>
<li><em>海平面上升 0.5m 水上土地情况</em></li>
</ul>
<p><img src="/2020/mcm-sz/sz-0.5m-r.jpg" alt="sz-0.5m-r"></p>
<ul>
<li><em>海平面上升 0.5m 土地被淹没情况</em></li>
</ul>
<p>比较 Google 地图分析得出，海平面上升 0.5 米后受影响最严重的是宝安区西岸。 其次是南山区蛇口半岛、深圳湾地区和龙岗区大鹏半岛。其中宝安西岸有深圳宝安国 际机场受损严重，蛇口半岛沿海住宅受影响较大，深圳湾地区因存在填海地块，所以 也有一定风险。而大鹏半岛因人口稀少，不再纳入评估范围。</p>
<h3 id="2100-年地形预测—海平面上升-1-0m"><a href="#2100-年地形预测—海平面上升-1-0m" class="headerlink" title="2100 年地形预测—海平面上升 1.0m"></a><strong>2100</strong> 年地形预测—海平面上升 1.0m</h3><p>根据上文所述，预计 2100 年深圳市海平面上升约 1.0 米。按同样的方法绘制地形图。</p>
<p><img src="/2020/mcm-sz/sz-1m.jpg" alt="sz-0.5m"></p>
<ul>
<li><em>海平面上升 1.0m 水上土地情况</em></li>
</ul>
<p><img src="/2020/mcm-sz/sz-1m-r.jpg" alt="sz-0.5m-r"></p>
<ul>
<li><em>海平面上升 1.0m 土地被淹没情况</em></li>
</ul>
<p>同上可以分析得出，海平面上升 1.0m 时与上升 0.5m 时受影响的区域范围大致相 同且程度更高。同时大梅沙等大鹏湾临海区域也受到较大影响，可能对住宅和旅游业构成风险。</p>
<h3 id="预想更远的未来—海平面上升-2-5m"><a href="#预想更远的未来—海平面上升-2-5m" class="headerlink" title="预想更远的未来—海平面上升 2~5m"></a>预想更远的未来—海平面上升 <strong>2</strong>~5m</h3><p>虽然在这个世纪，海平面上升 2~5 米几乎不可能发生，但仍可以模拟 2100 年后海平面上升对城市地表的改变。</p>
<p><img src="/2020/mcm-sz/sz-2m.jpg" alt="sz-0.5m"></p>
<ul>
<li><em>海平面上升 2.0m 水上土地情况</em></li>
</ul>
<p><img src="/2020/mcm-sz/sz-5m.jpg" alt="sz-0.5m-r"></p>
<ul>
<li><em>海平面上升 5.0m 土地被淹没情况</em></li>
</ul>
<p>从预测图可以看出，海平面上升 5m 后，南山区填海地块几乎全部淹没。蛇口半岛沿 海住宅区基本淹没。宝安西岸海岸线侵蚀严重。</p>
<h1 id="生态价值损失"><a href="#生态价值损失" class="headerlink" title="生态价值损失"></a>生态价值损失</h1><p>以深圳蛇口半岛为例[3]，海平面上升 1m，大铲湾的围垦养殖区将全部被海水淹 没，沿岸居民将被迫向内陆迁移，蛇口半岛部分港区码头也将处在海平面以下，严重 影响港口正常运营。如遇 50 年一遇或更大的风暴潮，黄田至大铲湾的养殖水域会被潮 水侵袭，沿岸城镇将出现内涝，深圳机场也将出现淹水，建设用地将占到淹没区的 60% 以上，养殖水域面积将近 30%，造成巨大的直接经济损失。未来由海平面上升引起的 移民、 产业转移、海堤码头破坏、涵闸加速废弃以及洪涝加剧等产生的间接经济损失 更加难以评估。</p>
<p>海平面上升淹没低洼地区不仅产生巨大经济损失，还会减损生态系统服务功能价 值。研究表明[3]，以 2000 年计价，海平面上升 1m，研究区生态系统服务功能价值损 失 1966.55 万元/a;如遇 50 年一遇最高潮位，损失将大幅增至 4477.92 万元/a。如 遇 100 年一遇最高潮位，损失更高达 5052.31 万元/a。以地均价值表示淹没区单位面 积生态系统服务功能价值，并将不同重现期最高潮位产生的地均价值损失与深圳市 2000 年地均 GDP 进行比较。结果表明[3]，海平面上升 1m，地均生态系统服务功能 价值损失 0.66 万元/(hm^2·a)，50 年一遇和 100 年一遇最高潮位相应损失 0.99 和 1.05 万元/(hm^2·a)，分别占深圳市地均 GDP(2000 年计价)的 0.8%，1.1%和 1.2%， 使深圳市地均 GDP(2000 年计价)存在约 1 个百分点的潜在损失。上述价值估算为各项 生态服务功能的最低价值，仅反映海平面上升淹没土地导致的生态价值损失。如考虑 海水入侵、地下水位上升及土壤盐渍化等因素对生态系统的影响，则生态系统服务功 能价值损失还将大幅增加。</p>
<h1 id="结论与建议"><a href="#结论与建议" class="headerlink" title="结论与建议"></a>结论与建议</h1><p>综合考虑各种因素影响，至 2050 年，全球海平面上升的最佳估计可能是 20~ 30cm。 对于中国沿海地区，特别是大三角洲平原地区而言，自然与人为引起的地面沉 降将仍是未来相对海平面上升的主要贡献因子。分析各三角洲地区的地面沉降趋势， 按保守估计的 21 世纪前半期相对海平面上升幅度可能将达到全球平均值的 2—3 倍[4]。 而深圳市 2050-2100 海平面可能上升 0.5m~1m。因此，必须高度重视未来相对海平 面上升对我国沿海地区、尤其是河口三角洲平原地区社会与经济发展的影响。</p>
<p>沿海地区是中国生产力布局的主轴线和经济增长最具活力的地区，人口与经济密 度均远高于内陆地区。目前沿海各种工程设施标准普遍偏低且功能正在不断下降，主 要城市 (包括天津、上海和广州等特大城市)发展过程中也普遍存在供、排水困难和城 市防洪负担过重等问题，各种海岸灾害呈现明显加剧趋势[4]。随着沿海经济总量的不 断扩大和相对海平面的加速上升，将使这些已十分突出的问题更加严重，灾害损失也 将大幅度增加。</p>
<p>为减轻海平面上升带来的不利影响，未来在沿海地区新建和布局各类重大经济项 目与基础设施以及在进行城市成片土地开发过程中，应明确考虑海平面上升因素 (如加 高基面、适当提高各类工程建设标准等)。如在本例中，深圳市的大量填海造陆区域需 要制定更有效的防范措施，防止海岸线侵蚀。海堤作为防御海平面上升危害和减轻海 岸灾害的最有效手段，国家有关部门应会同沿海各省市区，根据各地不同的自然环境 与社会经济特点，制定合理的防护标准与分期实施方案，以尽快改变我国海岸防护工 程建设长期滞后沿海经济发展的状况。我国沿海地区，特别是大河三角洲平原地区， 21 世纪前半期海平面上升在很大程度上是由于人类过量开采地下水等造成的地面沉降 引起的。制定严格的法规，控制沿海地下水资源超采和其他一切不合理经济活动，可 以有效地降低未来相对海平面上升幅度，大大减轻海平面上升的危害[5]。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]  <a href="https://www.academia.edu/195410/Demirkesen_A_C_Evrendilek_F_Berberoglu_S_Kilic_S_2007_Coastal_flood_risk_analysis_using_Landsat_7_ETM_Imagery_and_SRTM_DEM_a_case_study_of_Izmir_Turkey_Environmental_Monitoring_and_Assessment_131_293_300">Coastal Flood Risk Analysis Using Landsat-7 ETM+ Imagery and SRTM DEM: A Case Study of Izmir, Turkey</a></p>
<p>[2] 时小军，陈特固，余克服. 近40年来珠江口的海平面变化. 海洋地质与第四纪地质，2008，28(1):127-134．</p>
<p>[3] <a href="http://qikan.cqvip.com/Qikan/Article/Detail?id=30551850&from=Qikan_Article_Detail">海平面上升的生态损失评估——以深圳市蛇口半岛为例</a></p>
<p>[4] <a href="http://qikan.cqvip.com/Qikan/Article/Detail?id=47832016">我国沿海海平面变化预测方法探究</a></p>
<p>[5] 李平日.方国样.黄光庆．海平面上升对珠江三角洲经拜建设的可能影响与对策．地理学报，1993.48 (6):527— 536</p>
<p>[6] <a href="https://sites.math.washington.edu/~morrow/mcm/team2305.pdf">Floridian Coastline Recession February 18, 2008</a></p>
<p>[7] <a href="https://www.google.com/maps">Google Maps</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
